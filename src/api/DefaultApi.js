/**
 * 3Blades API
 * This is 3Blades's API.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@3blades.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Project', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/Project'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.3BladesApi) {
      root.3BladesApi = {};
    }
    root.3BladesApi.DefaultApi = factory(root.3BladesApi.ApiClient, root.3BladesApi.Error, root.3BladesApi.Project, root.3BladesApi.User);
  }
}(this, function(ApiClient, Error, Project, User) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 0.1.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the projectsPost operation.
     * @callback module:api/DefaultApi~projectsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new project
     * @param {Object} opts Optional parameters
     * @param {module:model/Project} opts.project Project to add
     * @param {module:api/DefaultApi~projectsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['project'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdChangeVisibilityPut operation.
     * @callback module:api/DefaultApi~projectsProjectIdChangeVisibilityPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the project visibility
     * @param {String} projectId The project&#39;s Id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isPrivate Send true If the project will be private
     * @param {module:api/DefaultApi~projectsProjectIdChangeVisibilityPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdChangeVisibilityPut = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = opts['isPrivate'];

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdChangeVisibilityPut");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectId}/change-visibility', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdDelete operation.
     * @callback module:api/DefaultApi~projectsProjectIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project by ID
     * @param {String} projectId The project&#39;s Id
     * @param {module:api/DefaultApi~projectsProjectIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdDelete = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdDelete");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdGet operation.
     * @callback module:api/DefaultApi~projectsProjectIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a project by ID
     * @param {String} projectId The project&#39;s Id
     * @param {module:api/DefaultApi~projectsProjectIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdGet = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdGet");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdPut operation.
     * @callback module:api/DefaultApi~projectsProjectIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates project object
     * Updates its name or description
     * @param {String} projectId The project&#39;s Id
     * @param {Object} opts Optional parameters
     * @param {module:model/Project} opts.project Project to add
     * @param {module:api/DefaultApi~projectsProjectIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdPut = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = opts['project'];

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdPut");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdWorkspacesGet operation.
     * @callback module:api/DefaultApi~projectsProjectIdWorkspacesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} projectId The project&#39;s Id
     * @param {module:api/DefaultApi~projectsProjectIdWorkspacesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdWorkspacesGet = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdWorkspacesGet");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectId}/workspaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/DefaultApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all users.
     * @param {module:api/DefaultApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.usersGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPost operation.
     * @callback module:api/DefaultApi~usersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new user
     * @param {module:model/User} user User definition
     * @param {module:api/DefaultApi~usersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usersPost = function(user, callback) {
      var postBody = user;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling usersPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdDelete operation.
     * @callback module:api/DefaultApi~usersUserIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user by ID
     * @param {String} userId The user&#39;s Id
     * @param {module:api/DefaultApi~usersUserIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usersUserIdDelete = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdDelete");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdGet operation.
     * @callback module:api/DefaultApi~usersUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a user by ID
     * @param {String} userId The user&#39;s Id
     * @param {module:api/DefaultApi~usersUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.usersUserIdGet = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdGet");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdProjectsGet operation.
     * @callback module:api/DefaultApi~usersUserIdProjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the user&#39;s projects
     * @param {String} userId The user&#39;s Id
     * @param {module:api/DefaultApi~usersUserIdProjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    this.usersUserIdProjectsGet = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdProjectsGet");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Project];

      return this.apiClient.callApi(
        '/users/{userId}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdPut operation.
     * @callback module:api/DefaultApi~usersUserIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates user object
     * Updates user data
     * @param {String} userId The user&#39;s Id
     * @param {module:model/User} user User definition
     * @param {module:api/DefaultApi~usersUserIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usersUserIdPut = function(userId, user, callback) {
      var postBody = user;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdPut");
      }

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling usersUserIdPut");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
