{
  "swagger" : "2.0",
  "info" : {
    "description" : "This is 3Blades's API.",
    "version" : "0.1.1",
    "title" : "3Blades API",
    "contact" : {
      "email" : "conactt@3blades.io"
    },
    "license" : {
      "name" : "AGPL 3.0",
      "url" : "https://www.gnu.org/licenses/agpl-3.0.en.html"
    }
  },
  "tags" : [ {
    "name" : "internal-use",
    "description" : "These actions are used internally for other apps/services"
  }, {
    "name" : "user-information",
    "description" : "Retrieve information about the user logged in"
  } ],
  "host" : "virtserver.swaggerhub.com",
  "basePath" : "/3Blades/app-backend/v1",
  "schemes" : [ "https" ],
  "produces" : [ "application/json" ],
  "consumes" : [ "application/json" ],
  "paths" : {
    "/admin/users" : {
      "get" : {
        "summary" : "Gets a list of all users.",
        "parameters" : [ {
          "$ref" : "#/parameters/skipParam"
        }, {
          "$ref" : "#/parameters/limitParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of users",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/User"
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Adds a new user",
        "parameters" : [ {
          "in" : "body",
          "name" : "user",
          "description" : "User definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "User created",
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location to get the new user"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/admin/users/{userId}" : {
      "get" : {
        "summary" : "Gets a user by ID",
        "parameters" : [ {
          "$ref" : "#/parameters/userId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user data",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "404" : {
            "$ref" : "#/responses/UserDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "summary" : "Updates user object",
        "description" : "Updates user data",
        "parameters" : [ {
          "$ref" : "#/parameters/userId"
        }, {
          "in" : "body",
          "name" : "user",
          "description" : "User definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User updated"
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          },
          "404" : {
            "$ref" : "#/responses/UserDoesNotExistResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a user by ID",
        "parameters" : [ {
          "$ref" : "#/parameters/userId"
        } ],
        "responses" : {
          "200" : {
            "description" : "User deleted"
          },
          "404" : {
            "$ref" : "#/responses/UserDoesNotExistResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/admin/environmentResources" : {
      "get" : {
        "parameters" : [ {
          "$ref" : "#/parameters/skipParam"
        }, {
          "$ref" : "#/parameters/limitParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/EnvironmentResources"
              }
            }
          }
        }
      },
      "post" : {
        "parameters" : [ {
          "name" : "env-resources",
          "in" : "body",
          "description" : "Resources type to create",
          "schema" : {
            "$ref" : "#/definitions/EnvironmentResources"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "Location where the new item can be obtained"
              }
            }
          }
        }
      }
    },
    "/admin/environmentResources/{environmentResourcesId}" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "environmentResourcesId",
        "required" : true,
        "type" : "string"
      } ],
      "delete" : {
        "summary" : "Deletes an unused resource type",
        "responses" : {
          "200" : {
            "description" : "Deleted"
          },
          "404" : {
            "$ref" : "#/responses/GeneralDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "summary" : "Updates a resource type",
        "responses" : {
          "200" : {
            "description" : "Updated"
          }
        }
      }
    },
    "/admin/environmentTypes" : {
      "get" : {
        "parameters" : [ {
          "$ref" : "#/parameters/skipParam"
        }, {
          "$ref" : "#/parameters/limitParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/EnvironmentType"
              }
            }
          }
        }
      },
      "post" : {
        "parameters" : [ {
          "name" : "env-type",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/EnvironmentType"
          },
          "description" : "Environment type to create"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        }
      }
    },
    "/admin/environmentTypes/{environmentTypeId}" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "environmentTypeId",
        "required" : true,
        "type" : "string"
      } ],
      "delete" : {
        "summary" : "Deletes an unused env type",
        "responses" : {
          "200" : {
            "description" : "Deleted"
          },
          "404" : {
            "$ref" : "#/responses/GeneralDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "summary" : "Updates an env type",
        "responses" : {
          "200" : {
            "description" : "Updated"
          }
        }
      }
    },
    "/admin/auditLogs" : {
      "get" : {
        "parameters" : [ {
          "$ref" : "#/parameters/skipParam"
        }, {
          "$ref" : "#/parameters/limitParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AuditLog"
              }
            }
          },
          "206" : {
            "description" : "Partial Content"
          }
        }
      },
      "post" : {
        "summary" : "Register actions or events that occurs internally on other application or services",
        "tags" : [ "internal-use" ],
        "parameters" : [ {
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AuditLog"
          },
          "in" : "body",
          "name" : "audit-log",
          "description" : "the event to register"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        }
      }
    },
    "/{namespace}/projects" : {
      "parameters" : [ {
        "$ref" : "#/parameters/namespace"
      } ],
      "get" : {
        "summary" : "Gets all the projects in the namespace context",
        "operationId" : "searchProject",
        "description" : "By passing in the appropriate options, you can search for\navailable project in the system\n",
        "parameters" : [ {
          "name" : "searchString",
          "in" : "query",
          "description" : "pass an optional search string for looking up project",
          "required" : false,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/skipParam"
        }, {
          "$ref" : "#/parameters/limitParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "Search results matching criteria",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Project"
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      },
      "post" : {
        "summary" : "Adds a new project",
        "parameters" : [ {
          "in" : "body",
          "name" : "project",
          "description" : "Project to add",
          "schema" : {
            "$ref" : "#/definitions/Project"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Project created",
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location to get the new project"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          },
          "409" : {
            "description" : "An existing project already exists"
          }
        }
      }
    },
    "/{namespace}/groups" : {
      "parameters" : [ {
        "$ref" : "#/parameters/namespace"
      } ],
      "get" : {
        "parameters" : [ {
          "$ref" : "#/parameters/skipParam"
        }, {
          "$ref" : "#/parameters/limitParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Group"
              }
            }
          }
        }
      },
      "post" : {
        "parameters" : [ {
          "name" : "group",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Group"
          },
          "description" : "New group to create"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Group"
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/{namespace}/groups/{groupId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/namespace"
      }, {
        "$ref" : "#/parameters/groupId"
      } ],
      "put" : {
        "description" : "Updates a group",
        "parameters" : [ {
          "in" : "body",
          "name" : "group",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Group"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "description" : "Deletes a group",
        "responses" : {
          "200" : {
            "description" : "Deleted"
          }
        }
      }
    },
    "/users/{userId}/integrations" : {
      "parameters" : [ {
        "$ref" : "#/parameters/userId"
      } ],
      "get" : {
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "206" : {
            "description" : "Partial Content"
          }
        }
      },
      "post" : {
        "parameters" : [ {
          "required" : false,
          "in" : "header",
          "name" : "Prefer",
          "type" : "string",
          "enum" : [ "return=representation", "return=representation,plurality=singular", "return=minimal", "return=none" ],
          "description" : "Preference"
        }, {
          "name" : "body",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Integration"
          },
          "description" : "integration"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "201" : {
            "description" : "Created"
          }
        }
      },
      "delete" : {
        "parameters" : [ {
          "name" : "Prefer",
          "in" : "header",
          "type" : "string",
          "enum" : [ "return=representation", "return=minimal", "return=none" ],
          "description" : "Preference"
        }, {
          "name" : "id",
          "in" : "query",
          "type" : "string",
          "format" : "integer"
        }, {
          "name" : "integrationId",
          "in" : "query",
          "type" : "string",
          "format" : "character varying"
        }, {
          "name" : "integrationEmail",
          "in" : "query",
          "type" : "string",
          "format" : "character varying"
        }, {
          "name" : "userId",
          "in" : "query",
          "type" : "string",
          "format" : "integer"
        }, {
          "name" : "scopes",
          "in" : "query",
          "type" : "string",
          "format" : "ARRAY"
        }, {
          "name" : "provider",
          "in" : "query",
          "type" : "string",
          "format" : "character varying"
        }, {
          "name" : "settings",
          "in" : "query",
          "type" : "string",
          "format" : "json"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/projects/{projectId}" : {
      "get" : {
        "summary" : "Gets a project by ID",
        "parameters" : [ {
          "$ref" : "#/parameters/projectId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the project data",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "summary" : "Updates project object",
        "description" : "Updates a project",
        "parameters" : [ {
          "$ref" : "#/parameters/projectId"
        }, {
          "in" : "body",
          "name" : "project",
          "description" : "Project to update",
          "schema" : {
            "$ref" : "#/definitions/Project"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Project updated"
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a project by ID",
        "parameters" : [ {
          "$ref" : "#/parameters/projectId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Project deleted"
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectId}/workspaces" : {
      "parameters" : [ {
        "$ref" : "#/parameters/projectId"
      } ],
      "get" : {
        "summary" : "Gets workspaces from a project",
        "responses" : {
          "200" : {
            "description" : "List of project workspaces",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Workspace"
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          }
        }
      },
      "post" : {
        "summary" : "Creates a new workspace to the project",
        "parameters" : [ {
          "in" : "body",
          "name" : "workspace",
          "description" : "Workspace definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Workspace"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Workspace created",
            "schema" : {
              "$ref" : "#/definitions/Workspace"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location where the new workspace is"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/projects/{projectId}/workspaces/{workspaceId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/projectId"
      }, {
        "$ref" : "#/parameters/workspaceId"
      } ],
      "get" : {
        "summary" : "Gets workspace by Id",
        "responses" : {
          "200" : {
            "description" : "Workspace data",
            "schema" : {
              "$ref" : "#/definitions/Workspace"
            }
          }
        }
      },
      "put" : {
        "summary" : "Updates a workspace",
        "parameters" : [ {
          "in" : "body",
          "name" : "workspace",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Workspace"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Workspace Updated"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a workspace",
        "responses" : {
          "200" : {
            "description" : "Workspace deleted"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectId}/models" : {
      "parameters" : [ {
        "$ref" : "#/parameters/projectId"
      } ],
      "get" : {
        "summary" : "Gets all the models contain in a project",
        "responses" : {
          "200" : {
            "description" : "List of project models",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Model"
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          }
        }
      },
      "post" : {
        "summary" : "Creates a new model to the project",
        "parameters" : [ {
          "in" : "body",
          "name" : "model",
          "description" : "Model definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Model created",
            "schema" : {
              "$ref" : "#/definitions/Model"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location where the new model is"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/projects/{projectId}/models/{modelId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/projectId"
      }, {
        "$ref" : "#/parameters/modelId"
      } ],
      "get" : {
        "summary" : "Gets model by Id",
        "responses" : {
          "200" : {
            "description" : "Model data",
            "schema" : {
              "$ref" : "#/definitions/Model"
            }
          }
        }
      },
      "put" : {
        "summary" : "Updates a model",
        "parameters" : [ {
          "in" : "body",
          "name" : "model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Model"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Model Updated"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a model",
        "responses" : {
          "200" : {
            "description" : "Model deleted"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectId}/jobs" : {
      "parameters" : [ {
        "$ref" : "#/parameters/projectId"
      } ],
      "get" : {
        "summary" : "Gets all the jobs contain in a project",
        "responses" : {
          "200" : {
            "description" : "List of project jobs",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Job"
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          }
        }
      },
      "post" : {
        "summary" : "Creates a new job to the project",
        "parameters" : [ {
          "in" : "body",
          "name" : "job",
          "description" : "Job definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Job"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Job created",
            "schema" : {
              "$ref" : "#/definitions/Job"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location where the new job is"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/projects/{projectId}/jobs/{jobId}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/projectId"
      }, {
        "$ref" : "#/parameters/jobId"
      } ],
      "get" : {
        "summary" : "Gets job by Id",
        "responses" : {
          "200" : {
            "description" : "Job data",
            "schema" : {
              "$ref" : "#/definitions/Job"
            }
          }
        }
      },
      "put" : {
        "summary" : "Updates a job",
        "parameters" : [ {
          "in" : "body",
          "name" : "model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Job"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Job Updated"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a job",
        "responses" : {
          "200" : {
            "description" : "Job deleted"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectId}/server/{serverId}/runStatistics" : {
      "parameters" : [ {
        "$ref" : "#/parameters/projectId"
      }, {
        "in" : "path",
        "name" : "serverId",
        "type" : "string",
        "required" : true,
        "description" : "Id to identify any type of server: Workspace, Model or Job"
      } ],
      "get" : {
        "summary" : "Gets all the run statistics",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ServerRunStatistics"
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/collaborators" : {
      "parameters" : [ {
        "$ref" : "#/parameters/projectId"
      } ],
      "get" : {
        "summary" : "Gets all active project collaborators",
        "description" : "",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Collaborator"
            }
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          }
        }
      },
      "post" : {
        "summary" : "Add a collaborator to the project",
        "parameters" : [ {
          "in" : "body",
          "name" : "collaborator email",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The collaborator was added",
            "headers" : {
              "Location" : {
                "description" : "Location where the collaborator can be obtained",
                "type" : "string"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/projects/{projectId}/collaborators/{userId}" : {
      "delete" : {
        "summary" : "Deletes a collaborator from the project",
        "parameters" : [ {
          "$ref" : "#/parameters/projectId"
        }, {
          "$ref" : "#/parameters/userId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Collaborator deleted"
          }
        }
      }
    },
    "/users/me/settings" : {
      "get" : {
        "tags" : [ "user-information" ],
        "summary" : "Gets the user settings",
        "responses" : {
          "200" : {
            "description" : "User settings",
            "schema" : {
              "type" : "object",
              "properties" : {
                "sshKey" : {
                  "$ref" : "#/definitions/SSHKey"
                },
                "emails" : {
                  "description" : "List of all emails registered",
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Email"
                  }
                },
                "integrations" : {
                  "description" : "List of all integrations in the account",
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Integration"
                  }
                },
                "token" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/UserDoesNotExistResponse"
          }
        }
      }
    },
    "/users/me/settings/sshkey" : {
      "get" : {
        "tags" : [ "user-information" ],
        "summary" : "Gets the ssh key created",
        "responses" : {
          "200" : {
            "description" : "Show the public part of SSH key",
            "schema" : {
              "$ref" : "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/users/me/settings/sshkey/reset" : {
      "post" : {
        "summary" : "Creates or reset the ssh key",
        "tags" : [ "user-information" ],
        "responses" : {
          "201" : {
            "description" : "ssh-key created or updated",
            "schema" : {
              "$ref" : "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/users/me/settings/emails" : {
      "get" : {
        "summary" : "Gets the emails registered in the account",
        "tags" : [ "user-information" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Email"
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Registers a new email",
        "tags" : [ "user-information" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "email",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Email"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "OK"
          }
        }
      }
    },
    "/users/me/settings/emails/{address}/make-primary" : {
      "put" : {
        "summary" : "Make the email address primary",
        "parameters" : [ {
          "in" : "path",
          "name" : "address",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/users/me" : {
      "get" : {
        "summary" : "Gets the user info",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "AuditLog" : {
      "type" : "object",
      "required" : [ "date", "action", "userId" ],
      "properties" : {
        "id" : {
          "format" : "integer",
          "type" : "integer",
          "readOnly" : true
        },
        "date" : {
          "format" : "date-time",
          "type" : "string"
        },
        "action" : {
          "type" : "string"
        },
        "userId" : {
          "format" : "integer",
          "type" : "integer"
        }
      }
    },
    "Collaborator" : {
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/User"
      } ],
      "properties" : {
        "joined" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "isOwner" : {
          "type" : "boolean",
          "default" : false,
          "readOnly" : true
        }
      }
    },
    "Email" : {
      "type" : "object",
      "required" : [ "address" ],
      "properties" : {
        "address" : {
          "type" : "string"
        },
        "public" : {
          "default" : true,
          "type" : "boolean"
        }
      }
    },
    "EnvironmentType" : {
      "type" : "object",
      "required" : [ "name", "imageName", "Cmd" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string"
        },
        "imageName" : {
          "type" : "string",
          "minLength" : 200
        },
        "Cmd" : {
          "type" : "string"
        }
      }
    },
    "Error" : {
      "type" : "object",
      "required" : [ "code", "message" ],
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "Group" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 20
        },
        "admin" : {
          "default" : false,
          "type" : "boolean"
        },
        "readPermission" : {
          "default" : false,
          "type" : "boolean"
        },
        "writePermission" : {
          "default" : false,
          "type" : "boolean"
        }
      }
    },
    "Integration" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "Int64",
          "type" : "integer"
        },
        "integrationId" : {
          "description" : "This value is an external id that the provider use to identify the integration",
          "type" : "string"
        },
        "integrationEmail" : {
          "type" : "string"
        },
        "userId" : {
          "description" : "The User id",
          "type" : "string"
        },
        "scopes" : {
          "description" : "the scopes where the integration is valid",
          "type" : "string"
        },
        "provider" : {
          "description" : "Provider name",
          "type" : "string"
        },
        "settings" : {
          "description" : "If the integration use addtitional information",
          "type" : "string"
        }
      }
    },
    "Job" : {
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/Server"
      } ],
      "required" : [ "script", "method" ],
      "properties" : {
        "script" : {
          "type" : "string",
          "example" : "my_model.py"
        },
        "method" : {
          "type" : "string",
          "example" : "sumNumbers"
        },
        "auto_restart" : {
          "type" : "boolean",
          "default" : true,
          "example" : false
        },
        "schedule" : {
          "type" : "string",
          "description" : "schedule this job every determined period",
          "enum" : [ "minute", "hour", "day", "week", "month", "year" ],
          "default" : "hour",
          "example" : "minute"
        }
      }
    },
    "Model" : {
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/Server"
      } ],
      "required" : [ "script", "method" ],
      "properties" : {
        "script" : {
          "type" : "string",
          "example" : "my_model.py"
        },
        "method" : {
          "type" : "string",
          "example" : "sumNumbers"
        }
      }
    },
    "Project" : {
      "type" : "object",
      "required" : [ "name", "isPrivate" ],
      "properties" : {
        "projectId" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "example" : "MyFirstProject",
          "pattern" : "[a-zA-Z0-9\\-]",
          "minLength" : 4,
          "maxLength" : 20
        },
        "description" : {
          "type" : "string",
          "example" : "A short description about the project."
        },
        "isPrivate" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "EnvironmentResources" : {
      "type" : "object",
      "required" : [ "name", "cpu", "memory" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string"
        },
        "cpu" : {
          "type" : "integer",
          "example" : 10
        },
        "memory" : {
          "type" : "integer",
          "example" : 512
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        }
      }
    },
    "Role" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "Server" : {
      "type" : "object",
      "required" : [ "name", "envTypeId", "resourcesId" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 20
        },
        "startupScript" : {
          "type" : "string"
        },
        "envTypeId" : {
          "$ref" : "#/definitions/EnvironmentType"
        },
        "resourcesId" : {
          "$ref" : "#/definitions/EnvironmentResources"
        },
        "envVars" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ServerRunStatistics" : {
      "type" : "object",
      "properties" : {
        "start" : {
          "format" : "date-time",
          "type" : "string"
        },
        "stop" : {
          "format" : "date-time",
          "type" : "string"
        },
        "exitCode" : {
          "format" : "int32",
          "type" : "integer"
        },
        "size" : {
          "format" : "int64",
          "type" : "string"
        },
        "stacktrace" : {
          "format" : "text",
          "type" : "string"
        }
      }
    },
    "ServerStatistics" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "integer",
          "type" : "integer"
        },
        "start" : {
          "format" : "timestamp without time zone",
          "type" : "string"
        },
        "stop" : {
          "format" : "timestamp without time zone",
          "type" : "string"
        },
        "size" : {
          "format" : "bigint",
          "type" : "string"
        },
        "serverId" : {
          "format" : "integer",
          "type" : "integer"
        }
      }
    },
    "SSHKey" : {
      "properties" : {
        "value" : {
          "type" : "string"
        }
      }
    },
    "SSHTunnel" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "integer",
          "type" : "integer"
        },
        "name" : {
          "format" : "character varying",
          "type" : "string"
        },
        "host" : {
          "format" : "character varying",
          "type" : "string"
        },
        "local_port" : {
          "format" : "integer",
          "type" : "integer"
        },
        "endpoint" : {
          "format" : "character varying",
          "type" : "string"
        },
        "remote_port" : {
          "format" : "integer",
          "type" : "integer"
        },
        "username" : {
          "format" : "character varying",
          "type" : "string"
        },
        "server_id" : {
          "format" : "integer",
          "type" : "integer"
        }
      }
    },
    "SyncedResource" : {
      "properties" : {
        "id" : {
          "format" : "integer",
          "type" : "integer"
        },
        "projectId" : {
          "format" : "integer",
          "type" : "integer"
        },
        "integrationId" : {
          "format" : "integer",
          "type" : "integer"
        },
        "folder" : {
          "format" : "character varying",
          "type" : "string"
        },
        "url" : {
          "format" : "character varying",
          "type" : "string"
        },
        "settings" : {
          "format" : "json",
          "type" : "string"
        },
        "lastSync" : {
          "format" : "timestamp without time zone",
          "type" : "string"
        },
        "status" : {
          "format" : "character varying",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "Team" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "integer",
          "type" : "integer"
        },
        "name" : {
          "format" : "character varying",
          "type" : "string"
        },
        "email" : {
          "format" : "character varying",
          "type" : "string"
        },
        "created_at" : {
          "format" : "timestamp without time zone",
          "type" : "string"
        },
        "createdById" : {
          "format" : "integer",
          "type" : "integer"
        },
        "avatarUrl" : {
          "format" : "character varying",
          "type" : "string"
        },
        "website" : {
          "format" : "character varying",
          "type" : "string"
        },
        "lastUpdated" : {
          "format" : "timestamp without time zone",
          "type" : "string"
        },
        "location" : {
          "format" : "character varying",
          "type" : "string"
        },
        "description" : {
          "format" : "text",
          "type" : "string"
        },
        "billingEmail" : {
          "format" : "character varying",
          "type" : "string"
        },
        "billingAddressId" : {
          "format" : "integer",
          "type" : "integer"
        },
        "billingPlanId" : {
          "format" : "integer",
          "type" : "integer"
        }
      }
    },
    "TeamGroups" : {
      "type" : "object",
      "properties" : {
        "teamId" : {
          "format" : "integer",
          "type" : "integer"
        },
        "groupId" : {
          "format" : "integer",
          "type" : "integer"
        }
      }
    },
    "TeamMember" : {
      "type" : "object",
      "properties" : {
        "teamId" : {
          "format" : "integer",
          "type" : "integer"
        },
        "memberId" : {
          "format" : "integer",
          "type" : "integer"
        },
        "status" : {
          "format" : "character varying",
          "type" : "string"
        }
      }
    },
    "TeamWatch" : {
      "type" : "object",
      "properties" : {
        "team_id" : {
          "format" : "integer",
          "type" : "integer"
        },
        "user_id" : {
          "format" : "integer",
          "type" : "integer"
        }
      }
    },
    "Token" : {
      "properties" : {
        "key" : {
          "format" : "character varying",
          "type" : "string"
        },
        "userId" : {
          "format" : "integer",
          "type" : "integer"
        }
      },
      "type" : "object"
    },
    "User" : {
      "type" : "object",
      "required" : [ "email", "username", "firstName" ],
      "properties" : {
        "userId" : {
          "type" : "string",
          "readOnly" : true
        },
        "username" : {
          "type" : "string",
          "minLength" : 6,
          "maxLength" : 15
        },
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "avatarUrl" : {
          "type" : "string"
        },
        "bio" : {
          "type" : "string"
        },
        "location" : {
          "type" : "string"
        },
        "company" : {
          "type" : "string"
        },
        "timezone" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "confirmedAt" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "createdAt" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        }
      }
    },
    "Workspace" : {
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/Server"
      } ]
    }
  },
  "parameters" : {
    "skipParam" : {
      "name" : "skip",
      "in" : "query",
      "description" : "number of items to skip",
      "required" : false,
      "type" : "integer",
      "format" : "int32"
    },
    "limitParam" : {
      "name" : "limit",
      "in" : "query",
      "description" : "max records to return",
      "required" : false,
      "type" : "integer",
      "format" : "int32"
    },
    "userId" : {
      "name" : "userId",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 25,
      "description" : "The user's Id",
      "type" : "string"
    },
    "projectId" : {
      "name" : "projectId",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 25,
      "description" : "The project's Id",
      "type" : "string"
    },
    "workspaceId" : {
      "name" : "workspaceId",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 20,
      "description" : "The workspace's Id",
      "type" : "string"
    },
    "modelId" : {
      "name" : "modelId",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 20,
      "description" : "The model's Id",
      "type" : "string"
    },
    "jobId" : {
      "name" : "jobId",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 20,
      "description" : "The job's Id",
      "type" : "string"
    },
    "namespace" : {
      "name" : "namespace",
      "in" : "path",
      "required" : true,
      "description" : "User id or team Id to identify the context",
      "type" : "string"
    },
    "groupId" : {
      "name" : "groupId",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 20,
      "description" : "The group's Id",
      "type" : "string"
    }
  },
  "responses" : {
    "UserDoesNotExistResponse" : {
      "description" : "User does not exist"
    },
    "ProjectDoesNotExistResponse" : {
      "description" : "Project does not exist"
    },
    "GeneralDoesNotExistResponse" : {
      "description" : "The object does not exist"
    },
    "BadRequestResponse" : {
      "description" : "Bad request. Verify field values"
    },
    "Standard500ErrorResponse" : {
      "description" : "Something was wrong",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    }
  }
}