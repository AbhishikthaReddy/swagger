{
  "swagger" : "2.0",
  "info" : {
    "title" : "3Blades API",
    "contact" : {
      "email" : "conact@3blades.io"
    },
    "version" : "0.1.1",
    "description" : "This documentation describes the `3Blades API`. 3Blades currently offers a **HTTP REST API** and a **Websocket Stream API**. Both of these APIs are used by the web user interface and command line tools (CLI). This documentation also provides examples on how to use the API, including CLI, Go and Python.\n\n  **Authentication**\n\nA valid `API Key` from your account is necessary to authenticate to the REST API and Stream API. To obtain your API Key, log into your account using the Web UI, select your profile at the top right hand corner, select Settings, and then select the Reveal link in the API Key section.\nEach API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-project_id’ parameter.\n\n  `X-Auth-Token`: The JSON web token (JWT) that you receive when logging into 3Blades.\n\n**REST API**\n\n  The 3Blades REST API is reachable through the following hostname:\n\n  https://api.3blades.io/\n\n  All requests should be sent to this endpoint using Basic authentication using your API key as password:\n\n  Authorization: `Basic 3f9g2bc9da80957de8f6e9f3623a6b35c3cc30c4`\n\nHTTP responses are given in JSON format, so the following Accept header is required for every API call:\n\n  Accept: `application/json`\n\nAdditional documentation can be found at https://support.3blades.io.\n\n  **Stream API**\n\n The 3Blades Stream API is available at:\n\n   wss://ws.3blades.io/\n\n  Authentication is the same on the Stream API as it is on the REST API:\n\n  Authorization: `Basic 3f9g2bc9da80957de8f6e9f3623a6b35c3cc30c4`",
    "license" : {
      "name" : "BSD 3.0",
      "url" : "https://opensource.org/licenses/BSD-3-Clause"
    }
  },
  "tags" : [ {
    "name" : "actions",
    "description" : "Action objects"
  }, {
    "name" : "admin",
    "description" : "Administrator resources"
  }, {
    "name" : "audit-logs",
    "description" : "Audit logs to track user activity"
  }, {
    "name" : "collaborators",
    "description" : "Project ollaborators"
  }, {
    "name" : "events",
    "description" : "Event objects"
  }, {
    "name" : "internal-use",
    "description" : "Actions are used internally by other services"
  }, {
    "name" : "groups",
    "description" : "Entity representing groups of users"
  }, {
    "name" : "integrations",
    "description" : "Integrations for account"
  }, {
    "name" : "jobs",
    "description" : "Job servers"
  }, {
    "name" : "models",
    "description" : "Model servers"
  }, {
    "name" : "namespaced",
    "description" : "Endpoints that can be accessed with user or team namespace"
  }, {
    "name" : "projects",
    "description" : "User or team projects"
  }, {
    "name" : "servers",
    "description" : "All server types"
  }, {
    "name" : "rest-api",
    "description" : "RESTful API endpoint type"
  }, {
    "name" : "ssh-tunnels",
    "description" : "SSH Tunnels configured for servers"
  }, {
    "name" : "stream-api",
    "description" : "Stream API endpoint type"
  }, {
    "name" : "teams",
    "description" : "Team accout"
  }, {
    "name" : "user-account",
    "description" : "User account"
  }, {
    "name" : "workspaces",
    "description" : "Workspace servers"
  } ],
  "host" : "virtserver.swaggerhub.com",
  "basePath" : "/3Blades/app-backend/v1",
  "schemes" : [ "https", "wss" ],
  "produces" : [ "application/json" ],
  "consumes" : [ "application/json" ],
  "securityDefinitions" : {
    "oauth2_password" : {
      "flow" : "password",
      "type" : "oauth2",
      "tokenUrl" : "/auth/oauth2/token",
      "scopes" : {
        "user" : "User scope",
        "admin" : "Admin scope"
      }
    }
  },
  "security" : [ {
    "oauth2_password" : [ "user" ]
  } ],
  "paths" : {
    "/action" : {
      "get" : {
        "tags" : [ "actions", "rest-api" ],
        "summary" : "Retrieve a list of actions in chronological order",
        "description" : "By passing in the appropriate options, you can search for\navailable actions in the system. Results are returned in chronological\norder.\n",
        "parameters" : [ {
          "name" : "action_id",
          "in" : "query",
          "description" : "Pass an optional action name for looking up an action\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Filter by state. Possible values In progress, Success, Failed\n",
          "default" : "In progress",
          "type" : "string",
          "required" : false
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "Filter by start date. Valid filtering values are start_date__gte (after or on the date supplied) and start_date__lte (before or on the date supplied)\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "Filter by end date. Valid filtering values are end_date__gte (after or on the date supplied) and end_date__lte (before or on the date supplied)\n",
          "required" : false,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/skip_param"
        }, {
          "$ref" : "#/parameters/limit_param"
        } ],
        "responses" : {
          "200" : {
            "description" : "Search results matching criteria",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Action"
              }
            }
          },
          "400" : {
            "description" : "Bad input parameter"
          },
          "404" : {
            "$ref" : "#/responses/ActionDoesNotExistResponse"
          }
        }
      },
      "post" : {
        "tags" : [ "actions", "rest-api" ],
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Create an action object",
        "parameters" : [ {
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Action"
          },
          "in" : "body",
          "name" : "action",
          "description" : "The action to create"
        } ],
        "responses" : {
          "201" : {
            "description" : "Action created"
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/action/{action_id}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/action_id"
      } ],
      "get" : {
        "tags" : [ "actions", "rest-api" ],
        "summary" : "Gets an action object by ID",
        "parameters" : [ {
          "$ref" : "#/parameters/action_id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns event data",
            "schema" : {
              "$ref" : "#/definitions/Action"
            }
          },
          "404" : {
            "$ref" : "#/responses/ActionDoesNotExistResponse"
          }
        }
      }
    },
    "/action/{action_id}/logs" : {
      "parameters" : [ {
        "$ref" : "#/parameters/action_id"
      } ],
      "get" : {
        "tags" : [ "actions", "stream-api" ],
        "summary" : "Gets a logs of an action by ID",
        "responses" : {
          "200" : {
            "description" : "Returns action streaming logs",
            "schema" : {
              "$ref" : "#/definitions/ActionLog"
            }
          },
          "404" : {
            "$ref" : "#/responses/ActionDoesNotExistResponse"
          }
        }
      }
    },
    "/action/{action_id}/cancel" : {
      "parameters" : [ {
        "$ref" : "#/parameters/action_id"
      } ],
      "post" : {
        "tags" : [ "actions", "rest-api" ],
        "summary" : "Cancel an action object by ID",
        "responses" : {
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          },
          "404" : {
            "$ref" : "#/responses/ActionDoesNotExistResponse"
          }
        }
      }
    },
    "/audit_logs" : {
      "get" : {
        "tags" : [ "audit-logs", "rest-api" ],
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "parameters" : [ {
          "$ref" : "#/parameters/skip_param"
        }, {
          "$ref" : "#/parameters/limit_param"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AuditLog"
              }
            }
          },
          "206" : {
            "description" : "Partial Content"
          }
        }
      },
      "post" : {
        "tags" : [ "internal-use", "rest-api" ],
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Register actions or events that occurs internally on other application or services",
        "parameters" : [ {
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AuditLog"
          },
          "in" : "body",
          "name" : "audit-log",
          "description" : "the event to register"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        }
      }
    },
    "/[namespace/]events" : {
      "get" : {
        "tags" : [ "events", "namespaced", "stream-api" ],
        "summary" : "Gets all events from owner context",
        "operationId" : "searchEvent",
        "description" : "By passing in the appropriate options, you can search for\navailable events in the system\n",
        "parameters" : [ {
          "name" : "searchString",
          "in" : "query",
          "description" : "pass an optional search string for looking up an event",
          "required" : false,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/skip_param"
        }, {
          "$ref" : "#/parameters/limit_param"
        } ],
        "responses" : {
          "200" : {
            "description" : "Search results matching criteria",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Event"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/[namespace/]events/{event_id}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/event_id"
      } ],
      "get" : {
        "tags" : [ "events", "namespaced", "stream-api" ],
        "summary" : "Gets a event by ID",
        "parameters" : [ {
          "$ref" : "#/parameters/event_id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns event data",
            "schema" : {
              "$ref" : "#/definitions/Event"
            }
          },
          "404" : {
            "$ref" : "#/responses/EventDoesNotExistResponse"
          }
        }
      }
    },
    "/[namespace/]groups" : {
      "get" : {
        "tags" : [ "groups", "namespaced", "rest-api" ],
        "parameters" : [ {
          "$ref" : "#/parameters/skip_param"
        }, {
          "$ref" : "#/parameters/limit_param"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Group"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "groups", "namespaced", "rest-api" ],
        "parameters" : [ {
          "name" : "group",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Group"
          },
          "description" : "New group to create"
        } ],
        "responses" : {
          "201" : {
            "description" : "Group created",
            "schema" : {
              "$ref" : "#/definitions/Group"
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/[namespace/]groups/{group_id}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/group_id"
      } ],
      "get" : {
        "tags" : [ "groups", "namespaced", "rest-api" ],
        "summary" : "Gets a group by ID",
        "responses" : {
          "200" : {
            "description" : "Returns group data",
            "schema" : {
              "$ref" : "#/definitions/Group"
            }
          },
          "404" : {
            "$ref" : "#/responses/EventDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "tags" : [ "groups", "namespaced", "rest-api" ],
        "description" : "Updates a group",
        "parameters" : [ {
          "in" : "body",
          "name" : "group",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Group"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "groups", "namespaced", "rest-api" ],
        "description" : "Deletes a group",
        "responses" : {
          "200" : {
            "description" : "Deleted group"
          }
        }
      }
    },
    "/[namespace/]projects/{project_id}" : {
      "get" : {
        "tags" : [ "projects", "namespaced", "rest-api" ],
        "summary" : "Gets a project by ID",
        "parameters" : [ {
          "$ref" : "#/parameters/project_id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the project data",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "tags" : [ "projects", "namespaced", "rest-api" ],
        "summary" : "Updates project object",
        "description" : "Updates a project",
        "parameters" : [ {
          "$ref" : "#/parameters/project_id"
        }, {
          "in" : "body",
          "name" : "project",
          "description" : "Project to update",
          "schema" : {
            "$ref" : "#/definitions/Project"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Project updated"
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "tags" : [ "projects", "namespaced", "rest-api" ],
        "summary" : "Deletes a project by ID",
        "parameters" : [ {
          "$ref" : "#/parameters/project_id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Project deleted"
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/[namespace/]projects/{project_id}/files" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project_id"
      } ],
      "get" : {
        "tags" : [ "files", "projects", "namespaced", "rest-api" ],
        "summary" : "Gets files from a project by project Id",
        "responses" : {
          "200" : {
            "description" : "List of project files",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/File"
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/FileDoesNotExistResponse"
          }
        }
      },
      "post" : {
        "tags" : [ "files", "namespaced", "projects", "rest-api" ],
        "summary" : "Create new file in project",
        "responses" : {
          "201" : {
            "description" : "File created",
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location to get the new file"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          },
          "409" : {
            "description" : "An existing file already exists"
          }
        }
      }
    },
    "/[namespace/]project/{project_id}/files/{file_id}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/file_id"
      }, {
        "$ref" : "#/parameters/project_id"
      } ],
      "get" : {
        "tags" : [ "files", "namespaced", "projects", "rest-api" ],
        "summary" : "Gets file by Id",
        "responses" : {
          "200" : {
            "description" : "File data",
            "schema" : {
              "$ref" : "#/definitions/File"
            }
          },
          "404" : {
            "$ref" : "#/responses/FileDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "tags" : [ "files", "namespaced", "projects", "rest-api" ],
        "summary" : "Updates a file",
        "parameters" : [ {
          "in" : "body",
          "name" : "file",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/File"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "File Updated"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "tags" : [ "files", "namespaced", "projects", "rest-api" ],
        "summary" : "Deletes a file",
        "responses" : {
          "200" : {
            "description" : "File deleted"
          },
          "404" : {
            "$ref" : "#/responses/FileDoesNotExistResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/[namespace/]projects/{project_id}/workspaces" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project_id"
      } ],
      "get" : {
        "tags" : [ "rest-api", "namespaced", "projects", "workspaces" ],
        "summary" : "Gets workspaces from a project",
        "responses" : {
          "200" : {
            "description" : "List of project workspaces",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Workspace"
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          }
        }
      },
      "post" : {
        "tags" : [ "rest-api", "namespaced", "projects", "workspaces" ],
        "summary" : "Creates a new workspace in the project",
        "parameters" : [ {
          "in" : "body",
          "name" : "workspace",
          "description" : "Workspace definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Workspace"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Workspace created",
            "schema" : {
              "$ref" : "#/definitions/Workspace"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location where the new workspace is"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/[namespace/]projects/{project_id}/workspaces/{workspace_id}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project_id"
      }, {
        "$ref" : "#/parameters/workspace_id"
      } ],
      "get" : {
        "tags" : [ "namespaced", "rest-api", "projects", "workspaces" ],
        "summary" : "Gets workspace by Id",
        "responses" : {
          "200" : {
            "description" : "Workspace data",
            "schema" : {
              "$ref" : "#/definitions/Workspace"
            }
          },
          "404" : {
            "$ref" : "#/responses/WorkspaceDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "tags" : [ "rest-api", "namespaced", "servers", "workspaces" ],
        "summary" : "Updates a workspace",
        "parameters" : [ {
          "in" : "body",
          "name" : "workspace",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Workspace"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Workspace Updated"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "tags" : [ "namespaced", "servers", "workspace" ],
        "summary" : "Deletes a workspace",
        "responses" : {
          "200" : {
            "description" : "Workspace deleted"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/[namespace/]projects/{project_id}/models" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project_id"
      } ],
      "get" : {
        "tags" : [ "models", "namespaced", "projects", "rest-api" ],
        "summary" : "Gets all models contained in a project",
        "responses" : {
          "200" : {
            "description" : "List of project models",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Model"
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          }
        }
      },
      "post" : {
        "tags" : [ "models", "namespaced", "projects", "rest-api" ],
        "summary" : "Creates a new model to the project",
        "parameters" : [ {
          "in" : "body",
          "name" : "model",
          "description" : "Model definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Model created",
            "schema" : {
              "$ref" : "#/definitions/Model"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location where the new model is"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/[namespace/]projects/{project_id}/models/{model_id}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project_id"
      }, {
        "$ref" : "#/parameters/model_id"
      } ],
      "get" : {
        "tags" : [ "models", "namespaced", "rest-api", "servers" ],
        "summary" : "Gets model by Id",
        "responses" : {
          "200" : {
            "description" : "Model data",
            "schema" : {
              "$ref" : "#/definitions/Model"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "models", "namespaced", "rest-api", "servers" ],
        "summary" : "Updates a model",
        "parameters" : [ {
          "in" : "body",
          "name" : "model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Model"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Model Updated"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "tags" : [ "models", "namespaced", "rest-api", "servers" ],
        "summary" : "Deletes a model",
        "responses" : {
          "200" : {
            "description" : "Model deleted"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/[namespace/]projects/{project_id}/jobs" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project_id"
      } ],
      "get" : {
        "tags" : [ "jobs", "namespaced", "rest-api", "servers" ],
        "summary" : "Gets all the jobs contain in a project",
        "responses" : {
          "200" : {
            "description" : "List of project jobs",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Job"
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          }
        }
      },
      "post" : {
        "tags" : [ "jobs", "namespaced", "rest-api", "servers" ],
        "summary" : "Creates a new job to the project",
        "parameters" : [ {
          "in" : "body",
          "name" : "job",
          "description" : "Job definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Job"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Job created",
            "schema" : {
              "$ref" : "#/definitions/Job"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location where the new job is"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/[namespace/]projects/{project_id}/jobs/{job_id}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project_id"
      }, {
        "$ref" : "#/parameters/job_id"
      } ],
      "get" : {
        "tags" : [ "jobs", "namespaced", "projects", "rest-api" ],
        "summary" : "Gets job by Id",
        "responses" : {
          "200" : {
            "description" : "Job data",
            "schema" : {
              "$ref" : "#/definitions/Job"
            }
          },
          "404" : {
            "$ref" : "#/responses/JobDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "tags" : [ "jobs", "namespaced", "projects", "rest-api" ],
        "summary" : "Updates a job",
        "parameters" : [ {
          "in" : "body",
          "name" : "model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Job"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Job Updated"
          },
          "404" : {
            "$ref" : "#/responses/JobDoesNotExistResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "tags" : [ "jobs", "namespaced", "rest-api", "servers" ],
        "summary" : "Deletes a job",
        "responses" : {
          "200" : {
            "description" : "Job deleted"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/[namespace/]projects/{project_id}/server/{server_id}/runs/stats" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project_id"
      }, {
        "$ref" : "#/parameters/server_id"
      } ],
      "get" : {
        "tags" : [ "rest-api", "namespaced", "servers" ],
        "summary" : "Gets all the run statistics",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ServerRunStatistics"
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/ServerDoesNotExistResponse"
          }
        }
      }
    },
    "/[namespace/]projects/{project_id}/server/{server_id}/runs/{run_id}/stats" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project_id"
      }, {
        "$ref" : "#/parameters/server_id"
      }, {
        "$ref" : "#/parameters/run_id"
      } ],
      "get" : {
        "tags" : [ "namespaced", "projects", "rest-api", "runs", "servers" ],
        "summary" : "Gets all run statistics",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ServerRunStatistics"
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/RunDoesNotExistResponse"
          }
        }
      }
    },
    "/[namespace/]projects/{project_id}/server/{server_id}/statistics" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project_id"
      }, {
        "$ref" : "#/parameters/server_id"
      } ],
      "get" : {
        "tags" : [ "namespaced", "projects", "rest-api", "servers" ],
        "summary" : "Gets all server statistics",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ServerStatistics"
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/ServerStatsDoesNotExistResponse"
          }
        }
      }
    },
    "/[namespace/]projects/{project_id}/server/{server_id}/logs" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project_id"
      }, {
        "$ref" : "#/parameters/server_id"
      } ],
      "get" : {
        "tags" : [ "projects", "servers", "stream-api" ],
        "summary" : "gets streaming logs by project and server ids",
        "parameters" : [ {
          "name" : "tail",
          "in" : "query",
          "default" : 300,
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "follow",
          "in" : "query",
          "default" : true,
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Workspace logs",
            "schema" : {
              "$ref" : "#/definitions/ServerLog"
            }
          },
          "404" : {
            "$ref" : "#/responses/ServerDoesNotExistResponse"
          }
        }
      }
    },
    "/[namespace/]projects/{project_id}/server/{server_id}/sshtunnels" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project_id"
      }, {
        "$ref" : "#/parameters/server_id"
      } ],
      "get" : {
        "tags" : [ "namespaced", "projects", "servers", "sshtunnels", "rest-api" ],
        "summary" : "Gets SSH tunnels",
        "description" : "Gets all active project SSH tunnels by poject and server Id",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SSHTunnel"
            }
          },
          "404" : {
            "$ref" : "#/responses/SSHTunnelDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "tags" : [ "namespaced", "projects", "servers", "sshtunnels", "rest-api" ],
        "summary" : "Updates an SSH Tunnel",
        "parameters" : [ {
          "in" : "body",
          "name" : "model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SSHTunnel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "SSH Tunnel Updated"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "post" : {
        "tags" : [ "namespaced", "projects", "servers", "sshtunnels", "rest-api" ],
        "summary" : "Add an SSH Tunnel to the project",
        "parameters" : [ {
          "in" : "body",
          "name" : "ssh_tunnel",
          "description" : "SSH tunnel definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SSHTunnel"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The SSH tunnel was added",
            "headers" : {
              "Location" : {
                "description" : "Location where the SSH tunnel can be obtained",
                "type" : "string"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/[namespace/]projects/{project_id}/collaborators" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project_id"
      } ],
      "get" : {
        "tags" : [ "collaborators", "servers", "rest-api" ],
        "summary" : "Gets all active project collaborators",
        "description" : "",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Collaborator"
            }
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          }
        }
      },
      "post" : {
        "tags" : [ "collaborators", "servers", "rest-api" ],
        "summary" : "Add a collaborator to the project",
        "parameters" : [ {
          "in" : "body",
          "name" : "collaborator email",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The collaborator was added",
            "headers" : {
              "Location" : {
                "description" : "Location where the collaborator can be obtained",
                "type" : "string"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/[namespace/]projects/{project_id}/collaborators/{user_id}" : {
      "delete" : {
        "tags" : [ "collaborators", "namespaced", "rest-api", "servers" ],
        "summary" : "Deletes a collaborator from the project",
        "parameters" : [ {
          "$ref" : "#/parameters/project_id"
        }, {
          "$ref" : "#/parameters/user_id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Collaborator deleted"
          }
        }
      }
    },
    "/[namespace/]projects" : {
      "get" : {
        "tags" : [ "projects", "namespaced", "rest-api" ],
        "summary" : "Gets all the projects in the owner context",
        "operationId" : "searchProject",
        "description" : "By passing in the appropriate options, you can search for\navailable project in the system\n",
        "parameters" : [ {
          "name" : "searchString",
          "in" : "query",
          "description" : "pass an optional search string for looking up project",
          "required" : false,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/skip_param"
        }, {
          "$ref" : "#/parameters/limit_param"
        } ],
        "responses" : {
          "200" : {
            "description" : "Search results matching criteria",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Event"
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      },
      "post" : {
        "tags" : [ "projects", "namespaced", "rest-api" ],
        "summary" : "Adds a new project",
        "parameters" : [ {
          "in" : "body",
          "name" : "project",
          "description" : "Project to add",
          "schema" : {
            "$ref" : "#/definitions/Project"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Project created",
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location to get the new project"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          },
          "409" : {
            "description" : "An existing project already exists"
          }
        }
      }
    },
    "/[namespace/]settings" : {
      "get" : {
        "tags" : [ "namespaced", "rest-api", "user-account" ],
        "summary" : "Gets the user settings",
        "responses" : {
          "200" : {
            "description" : "User settings",
            "schema" : {
              "type" : "object",
              "properties" : {
                "sshKey" : {
                  "$ref" : "#/definitions/SSHKey"
                },
                "emails" : {
                  "description" : "List of all emails registered",
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Email"
                  }
                },
                "integrations" : {
                  "description" : "List of all integrations in the account",
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Integration"
                  }
                },
                "token" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/UserDoesNotExistResponse"
          }
        }
      }
    },
    "/[namespace/]settings/sshkey" : {
      "get" : {
        "tags" : [ "namespaced", "rest-api", "user-account" ],
        "summary" : "Gets the ssh key created",
        "responses" : {
          "200" : {
            "description" : "Show the public part of SSH key",
            "schema" : {
              "$ref" : "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/[namespace/]settings/sshkey/reset" : {
      "post" : {
        "summary" : "Creates or resets the ssh key",
        "tags" : [ "namespaced", "rest-api", "user-account" ],
        "responses" : {
          "201" : {
            "description" : "ssh-key created or updated",
            "schema" : {
              "$ref" : "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/[namespace/]settings/emails" : {
      "get" : {
        "summary" : "Gets the emails registered in the account",
        "tags" : [ "namespaced", "rest-api", "user-account" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Email"
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Registers a new email",
        "tags" : [ "namespaced", "rest-api", "user-account" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "email",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Email"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "OK"
          }
        }
      }
    },
    "/[namespace/]settings/emails/{address}/make_primary" : {
      "put" : {
        "tags" : [ "namespaced", "rest-api", "user-account" ],
        "summary" : "Make email address primary address",
        "parameters" : [ {
          "in" : "path",
          "name" : "address",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/[namespace/]settings/api_key" : {
      "get" : {
        "tags" : [ "namespaced", "rest-api", "user-account" ],
        "summary" : "gets the value of api_key",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Token"
            }
          }
        }
      }
    },
    "/[namespace/]settings/api_key/reset" : {
      "post" : {
        "tags" : [ "namespaced", "rest-api", "user-account" ],
        "summary" : "Creates or Resets the api_key",
        "responses" : {
          "201" : {
            "description" : "ssh-key created or updated",
            "schema" : {
              "$ref" : "#/definitions/Token"
            }
          }
        }
      }
    },
    "/[namespace/]servers/options/resources" : {
      "get" : {
        "tags" : [ "namespaced", "rest-api", "servers" ],
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "parameters" : [ {
          "$ref" : "#/parameters/skip_param"
        }, {
          "$ref" : "#/parameters/limit_param"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ServerResourcesType"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "rest-api", "namespaced", "servers" ],
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "parameters" : [ {
          "name" : "resources-type",
          "in" : "body",
          "description" : "Resources type to create",
          "schema" : {
            "$ref" : "#/definitions/ServerResourcesType"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "Location where the new item can be obtained"
              }
            }
          }
        }
      }
    },
    "/[namespace/]servers/options/resources/{resources_id}" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "resources_id",
        "required" : true,
        "type" : "string"
      } ],
      "delete" : {
        "tags" : [ "namespaced", "rest-api", "servers" ],
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Deletes an unused resource type",
        "responses" : {
          "200" : {
            "description" : "Deleted"
          },
          "404" : {
            "$ref" : "#/responses/GeneralDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "tags" : [ "namespaced", "rest-api", "servers" ],
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Updates a resource type",
        "responses" : {
          "200" : {
            "description" : "Updated"
          }
        }
      }
    },
    "/[namespace/]servers/options/types" : {
      "get" : {
        "tags" : [ "namespaced", "rest-api", "servers" ],
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "parameters" : [ {
          "$ref" : "#/parameters/skip_param"
        }, {
          "$ref" : "#/parameters/limit_param"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ServerType"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "namespaced", "rest-api", "servers" ],
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "parameters" : [ {
          "name" : "server-type",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/ServerType"
          },
          "description" : "Environment type to create"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        }
      }
    },
    "/[namespace/]servers/options/types/{type_id}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/type_id"
      } ],
      "delete" : {
        "tags" : [ "namespaced", "rest-api", "servers" ],
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Deletes an unused env type",
        "responses" : {
          "200" : {
            "description" : "Deleted"
          },
          "404" : {
            "$ref" : "#/responses/GeneralDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "tags" : [ "namespaced", "rest-api", "servers" ],
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Updates an env type",
        "responses" : {
          "200" : {
            "description" : "Updated"
          }
        }
      }
    },
    "/[namespace/]teams" : {
      "get" : {
        "tags" : [ "namespaced", "rest-api", "teams" ],
        "summary" : "Gets all user teams",
        "description" : "The teams can be the created by herself or those where her was added",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Team"
              }
            }
          }
        }
      }
    },
    "/[namespace/]integrations" : {
      "get" : {
        "tags" : [ "integrations", "namespaced", "rest-api" ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "post" : {
        "tags" : [ "integrations", "namespaced", "rest-api" ],
        "parameters" : [ {
          "name" : "integration",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Integration"
          },
          "description" : "integration"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        }
      }
    },
    "/[namespace/]users" : {
      "get" : {
        "tags" : [ "namespaced", "rest-api", "users" ],
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Gets a list of all users.",
        "parameters" : [ {
          "$ref" : "#/parameters/skip_param"
        }, {
          "$ref" : "#/parameters/limit_param"
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of users",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/User"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "namespaced", "rest-api", "users" ],
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Adds a new user",
        "parameters" : [ {
          "in" : "body",
          "name" : "user",
          "description" : "User definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "User created",
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location to get the new user"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/users/me" : {
      "get" : {
        "tags" : [ "rest-api", "user-account" ],
        "summary" : "Gets the user info",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          }
        }
      }
    },
    "/users/{user_id}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/user_id"
      } ],
      "get" : {
        "tags" : [ "rest-api", "users" ],
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Gets a user by ID",
        "responses" : {
          "200" : {
            "description" : "Returns the user data",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "404" : {
            "$ref" : "#/responses/UserDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "tags" : [ "rest-api", "users" ],
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Updates user object",
        "description" : "Updates user data",
        "parameters" : [ {
          "$ref" : "#/parameters/user_id"
        }, {
          "in" : "body",
          "name" : "user",
          "description" : "User definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User updated"
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          },
          "404" : {
            "$ref" : "#/responses/UserDoesNotExistResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "tags" : [ "rest-api", "users" ],
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Deletes a user by ID",
        "parameters" : [ {
          "$ref" : "#/parameters/user_id"
        } ],
        "responses" : {
          "200" : {
            "description" : "User deleted"
          },
          "404" : {
            "$ref" : "#/responses/UserDoesNotExistResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    }
  },
  "definitions" : {
    "AuditLog" : {
      "type" : "object",
      "required" : [ "date", "action", "user_id" ],
      "properties" : {
        "id" : {
          "format" : "integer",
          "type" : "integer",
          "readOnly" : true
        },
        "date" : {
          "format" : "date-time",
          "type" : "string"
        },
        "action" : {
          "type" : "string"
        },
        "user_id" : {
          "format" : "integer",
          "type" : "integer"
        }
      }
    },
    "Action" : {
      "type" : "object",
      "properties" : {
        "resource_uri" : {
          "type" : "string"
        },
        "uuid" : {
          "type" : "string",
          "description" : "A unique identifier for the action generated automatically on creation"
        },
        "object" : {
          "type" : "object",
          "description" : "The API object (resource URI) to which the action applies to"
        },
        "action" : {
          "type" : "string",
          "description" : "Name of the operation performed/being performed"
        },
        "method" : {
          "type" : "string",
          "description" : "HTTP method used to access the API"
        },
        "path" : {
          "type" : "string",
          "description" : "HTTP path of the API accessed"
        },
        "user" : {
          "type" : "string",
          "description" : "The user authenticated in the request that created the action"
        },
        "user_agent" : {
          "type" : "string",
          "description" : "The user agent provided by the client when accessing the API endpoint"
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time when the API call was performed and the operation started processing"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time when the API call finished processing"
        },
        "state" : {
          "type" : "string",
          "description" : "State of the operation (see table below)",
          "enum" : [ "Pending", "In Progress", "Canceling", "Cancelled", "Success", "Failed" ],
          "default" : "Pending"
        },
        "ip" : {
          "type" : "string",
          "description" : "IP address of the user that performed the API call"
        },
        "location" : {
          "type" : "string",
          "description" : "Geographic location of the IP address of the user that performed the API call"
        },
        "is_user_action" : {
          "type" : "boolean",
          "description" : "If the action has been triggered by the user"
        },
        "can_be_cancelled" : {
          "type" : "boolean",
          "description" : "If the action can be retried by the user"
        },
        "can_be_retried" : {
          "type" : "boolean",
          "description" : "If the action can be canceled by the user in the middle of its execution"
        }
      }
    },
    "ActionLog" : {
      "properties" : {
        "follow" : {
          "type" : "boolean",
          "default" : true,
          "example" : true
        },
        "tail" : {
          "type" : "integer",
          "format" : "int32",
          "default" : 300,
          "example" : 350
        }
      }
    },
    "Collaborator" : {
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/User"
      } ],
      "properties" : {
        "joined" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "isOwner" : {
          "type" : "boolean",
          "default" : false,
          "readOnly" : true
        }
      }
    },
    "Email" : {
      "type" : "object",
      "required" : [ "address" ],
      "properties" : {
        "address" : {
          "type" : "string"
        },
        "public" : {
          "default" : true,
          "type" : "boolean"
        }
      }
    },
    "Error" : {
      "type" : "object",
      "required" : [ "code", "message" ],
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "Event" : {
      "type" : "object",
      "properties" : {
        "action" : {
          "type" : "string",
          "description" : "Type of action that was executed on the object. Possible values create, update or delete.",
          "enum" : [ "create", "update", "delete" ]
        },
        "datetime" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time of the event in ISO 8601 format"
        },
        "resource_uri" : {
          "type" : "string",
          "description" : "Resource URI (REST API) of the object that was created or updated. You can do a GET operation on this URL to fetch its details"
        },
        "state" : {
          "type" : "string",
          "description" : "The current state of the object"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of object that was created or updated. For possible values, check the events types table below.",
          "enum" : [ "action", "data_source", "error", "file", "folder", "integration'", "job_server", "model_server", "project", "workspace_server" ]
        },
        "uuid" : {
          "type" : "string",
          "description" : "Unique identifier for the event"
        }
      }
    },
    "File" : {
      "type" : "object",
      "required" : [ "content", "encoding", "file-path" ],
      "properties" : {
        "file_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "file-path" : {
          "type" : "string"
        },
        "encoding" : {
          "type" : "string"
        },
        "author-email" : {
          "type" : "string"
        },
        "author-name" : {
          "type" : "string"
        },
        "content" : {
          "type" : "string",
          "format" : "byte",
          "description" : "content as base64 encoded characters"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "file size in bytes"
        },
        "public" : {
          "default" : true,
          "type" : "boolean"
        }
      }
    },
    "Group" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 20
        },
        "admin" : {
          "default" : false,
          "type" : "boolean"
        },
        "readPermission" : {
          "default" : false,
          "type" : "boolean"
        },
        "writePermission" : {
          "default" : false,
          "type" : "boolean"
        }
      }
    },
    "Integration" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "Int64",
          "type" : "integer"
        },
        "integrationId" : {
          "description" : "This value is an external id that the provider use to identify the integration",
          "type" : "string"
        },
        "integrationEmail" : {
          "type" : "string"
        },
        "user_id" : {
          "description" : "The User id",
          "type" : "string"
        },
        "scopes" : {
          "description" : "the scopes where the integration is valid",
          "type" : "string"
        },
        "provider" : {
          "description" : "Provider name",
          "type" : "string"
        },
        "settings" : {
          "description" : "If the integration use addtitional information",
          "type" : "string"
        }
      }
    },
    "Job" : {
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/Server"
      } ],
      "required" : [ "script", "method" ],
      "properties" : {
        "script" : {
          "type" : "string",
          "example" : "my_model.py"
        },
        "method" : {
          "type" : "string",
          "example" : "sumNumbers"
        },
        "auto_restart" : {
          "type" : "boolean",
          "default" : true,
          "example" : false
        },
        "schedule" : {
          "type" : "string",
          "description" : "schedule this job every determined period",
          "enum" : [ "minute", "hour", "day", "week", "month", "year" ],
          "default" : "hour",
          "example" : "minute"
        }
      }
    },
    "Model" : {
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/Server"
      } ],
      "required" : [ "script", "method" ],
      "properties" : {
        "script" : {
          "type" : "string",
          "example" : "my_model.py"
        },
        "method" : {
          "type" : "string",
          "example" : "sumNumbers"
        }
      }
    },
    "Project" : {
      "type" : "object",
      "required" : [ "name", "isPrivate" ],
      "properties" : {
        "project_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "example" : "MyFirstProject",
          "pattern" : "[a-zA-Z0-9\\-]",
          "minLength" : 4,
          "maxLength" : 20
        },
        "description" : {
          "type" : "string",
          "example" : "A short description about the project."
        },
        "isPrivate" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "ServerResourcesType" : {
      "type" : "object",
      "required" : [ "name", "cpu", "memory" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string"
        },
        "cpu" : {
          "type" : "integer",
          "example" : 10
        },
        "memory" : {
          "type" : "integer",
          "example" : 512
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        }
      }
    },
    "Server" : {
      "type" : "object",
      "required" : [ "name", "envTypeId", "resourcesId" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 20
        },
        "startupScript" : {
          "type" : "string"
        },
        "envTypeId" : {
          "$ref" : "#/definitions/ServerType"
        },
        "resourcesId" : {
          "$ref" : "#/definitions/ServerResourcesType"
        },
        "envVars" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ServerLog" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "number",
          "format" : "int32"
        },
        "log" : {
          "format" : "text",
          "type" : "string"
        },
        "stream-type" : {
          "format" : "text",
          "type" : "string"
        },
        "timestamp" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "ServerRunStatistics" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "number",
          "format" : "int32"
        },
        "start" : {
          "format" : "date-time",
          "type" : "string"
        },
        "stop" : {
          "format" : "date-time",
          "type" : "string"
        },
        "exitCode" : {
          "format" : "int32",
          "type" : "integer"
        },
        "size" : {
          "format" : "int64",
          "type" : "number"
        },
        "stacktrace" : {
          "format" : "text",
          "type" : "string"
        }
      }
    },
    "ServerStatistics" : {
      "type" : "object",
      "properties" : {
        "start" : {
          "format" : "date-time",
          "type" : "string"
        },
        "stop" : {
          "format" : "date-time",
          "type" : "string"
        },
        "size" : {
          "format" : "int64",
          "type" : "number"
        }
      }
    },
    "ServerType" : {
      "type" : "object",
      "required" : [ "name", "imageName", "Cmd" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string"
        },
        "imageName" : {
          "type" : "string",
          "minLength" : 200
        },
        "Cmd" : {
          "type" : "string"
        }
      }
    },
    "SSHKey" : {
      "properties" : {
        "value" : {
          "type" : "string"
        }
      }
    },
    "SSHTunnel" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "integer",
          "type" : "integer"
        },
        "name" : {
          "format" : "character varying",
          "type" : "string"
        },
        "host" : {
          "format" : "character varying",
          "type" : "string"
        },
        "local_port" : {
          "format" : "integer",
          "type" : "integer"
        },
        "endpoint" : {
          "format" : "character varying",
          "type" : "string"
        },
        "remote_port" : {
          "format" : "integer",
          "type" : "integer"
        },
        "username" : {
          "format" : "character varying",
          "type" : "string"
        },
        "server_id" : {
          "format" : "integer",
          "type" : "integer"
        }
      }
    },
    "SyncedResource" : {
      "properties" : {
        "id" : {
          "format" : "integer",
          "type" : "integer"
        },
        "project_id" : {
          "format" : "integer",
          "type" : "integer"
        },
        "integrationId" : {
          "format" : "integer",
          "type" : "integer"
        },
        "folder" : {
          "format" : "character varying",
          "type" : "string"
        },
        "url" : {
          "format" : "character varying",
          "type" : "string"
        },
        "settings" : {
          "format" : "json",
          "type" : "string"
        },
        "lastSync" : {
          "format" : "timestamp without time zone",
          "type" : "string"
        },
        "status" : {
          "format" : "character varying",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "Team" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "integer",
          "type" : "integer"
        },
        "name" : {
          "format" : "character varying",
          "type" : "string"
        },
        "email" : {
          "format" : "character varying",
          "type" : "string"
        },
        "created_at" : {
          "format" : "timestamp without time zone",
          "type" : "string"
        },
        "createdById" : {
          "format" : "integer",
          "type" : "integer"
        },
        "avatarUrl" : {
          "format" : "character varying",
          "type" : "string"
        },
        "website" : {
          "format" : "character varying",
          "type" : "string"
        },
        "lastUpdated" : {
          "format" : "timestamp without time zone",
          "type" : "string"
        },
        "location" : {
          "format" : "character varying",
          "type" : "string"
        },
        "description" : {
          "format" : "text",
          "type" : "string"
        },
        "billingEmail" : {
          "format" : "character varying",
          "type" : "string"
        },
        "billingAddressId" : {
          "format" : "integer",
          "type" : "integer"
        },
        "billingPlanId" : {
          "format" : "integer",
          "type" : "integer"
        }
      }
    },
    "TeamGroup" : {
      "type" : "object",
      "properties" : {
        "teamId" : {
          "format" : "integer",
          "type" : "integer"
        },
        "group_id" : {
          "format" : "integer",
          "type" : "integer"
        }
      }
    },
    "TeamMember" : {
      "type" : "object",
      "properties" : {
        "teamId" : {
          "format" : "integer",
          "type" : "integer"
        },
        "memberId" : {
          "format" : "integer",
          "type" : "integer"
        },
        "status" : {
          "format" : "character varying",
          "type" : "string"
        }
      }
    },
    "Token" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string"
        }
      }
    },
    "Trigger" : {
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "A user provided name for the trigger"
        },
        "operation" : {
          "type" : "string",
          "description" : "The operation that the trigger call performes"
        },
        "resource_uri" : {
          "type" : "string",
          "description" : "A unique API endpoint that represents the trigger"
        },
        "url" : {
          "type" : "string",
          "description" : "Address to be used to call the trigger with a POST request",
          "enum" : [ "redeploy" ]
        }
      }
    },
    "User" : {
      "type" : "object",
      "required" : [ "email", "username", "firstName" ],
      "properties" : {
        "user_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "username" : {
          "type" : "string",
          "minLength" : 6,
          "maxLength" : 15
        },
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "avatarUrl" : {
          "type" : "string"
        },
        "bio" : {
          "type" : "string"
        },
        "location" : {
          "type" : "string"
        },
        "company" : {
          "type" : "string"
        },
        "timezone" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "confirmedAt" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "createdAt" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        }
      }
    },
    "Workspace" : {
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/Server"
      } ]
    }
  },
  "parameters" : {
    "action_id" : {
      "name" : "action_id",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 25,
      "description" : "The action's Id",
      "type" : "string"
    },
    "event_id" : {
      "name" : "event_id",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 25,
      "description" : "The event's Id",
      "type" : "string"
    },
    "file_id" : {
      "name" : "file_id",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 25,
      "description" : "The file's Id",
      "type" : "string"
    },
    "group_id" : {
      "name" : "group_id",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 20,
      "description" : "The group's Id",
      "type" : "string"
    },
    "job_id" : {
      "name" : "job_id",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 20,
      "description" : "The job's Id",
      "type" : "string"
    },
    "limit_param" : {
      "name" : "limit",
      "in" : "query",
      "description" : "max records to return",
      "required" : false,
      "type" : "integer",
      "format" : "int32"
    },
    "model_id" : {
      "name" : "model_id",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 20,
      "description" : "The model's Id",
      "type" : "string"
    },
    "project_id" : {
      "name" : "project_id",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 25,
      "description" : "The project's Id",
      "type" : "string"
    },
    "run_id" : {
      "in" : "path",
      "name" : "run_id",
      "type" : "number",
      "format" : "int32",
      "required" : true
    },
    "skip_param" : {
      "name" : "skip",
      "in" : "query",
      "description" : "number of items to skip",
      "required" : false,
      "type" : "integer",
      "format" : "int32"
    },
    "server_id" : {
      "in" : "path",
      "name" : "server_id",
      "type" : "string",
      "required" : true,
      "description" : "Id to identify any type of server: Workspace, Model or Job"
    },
    "type_id" : {
      "in" : "path",
      "name" : "type_id",
      "type" : "string",
      "enum" : [ "job", "model", "workspace" ],
      "required" : true,
      "description" : "Id to identify server type"
    },
    "user_id" : {
      "name" : "user_id",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 25,
      "description" : "The user's Id",
      "type" : "string"
    },
    "workspace_id" : {
      "name" : "workspace_id",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 20,
      "description" : "The workspace's Id",
      "type" : "string"
    }
  },
  "responses" : {
    "ActionDoesNotExistResponse" : {
      "description" : "Action does not exist"
    },
    "BadRequestResponse" : {
      "description" : "Bad request. Verify field values"
    },
    "EventDoesNotExistResponse" : {
      "description" : "Event does not exist"
    },
    "FileDoesNotExistResponse" : {
      "description" : "File does not exist"
    },
    "GeneralDoesNotExistResponse" : {
      "description" : "The object does not exist"
    },
    "JobDoesNotExistResponse" : {
      "description" : "Job does not exist"
    },
    "ProjectDoesNotExistResponse" : {
      "description" : "Project does not exist"
    },
    "RunDoesNotExistResponse" : {
      "description" : "Run does not exist"
    },
    "ServerDoesNotExistResponse" : {
      "description" : "Server does not exist"
    },
    "ServerStatsDoesNotExistResponse" : {
      "description" : "Server statistics do not exist"
    },
    "SSHTunnelDoesNotExistResponse" : {
      "description" : "SSH Tunnel does not exist"
    },
    "Standard500ErrorResponse" : {
      "description" : "Something went wrong",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    },
    "UserDoesNotExistResponse" : {
      "description" : "User does not exist"
    },
    "WorkspaceDoesNotExistResponse" : {
      "description" : "Workspace does not exist"
    }
  }
}