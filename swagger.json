{
  "swagger" : "2.0",
  "info" : {
    "title" : "3Blades API",
    "contact" : {
      "email" : "conact@3blades.io"
    },
    "version" : "0.1.1",
    "description" : "This documentation describes the `3Blades API`. 3Blades currently offers a **HTTP REST API** and a **Websocket Stream API**. Both of these APIs are used by the web user interface and command line tools (CLI). This documentation also provides examples on how to use the API, including CLI, Go and Python.\n\n  **Authentication**\n\nA valid `API Key` from your account is necessary to authenticate to the REST API and Stream API. To obtain your API Key, log into your account using the Web UI, select your profile at the top right hand corner, select Settings, and then select the Reveal link in the API Key section.\nEach API request requires an HTTP header that includes the 'X-Auth-Token’ and 'X-Auth-Project-Id’ parameter. \n\n  `X-Auth-Token`: The JSON web token (JWT) that you receive when logging into 3Blades.\n  \n**REST API**\n\n  The 3Blades REST API is reachable through the following hostname:\n\n  https://api.3blades.io/\n\n  All requests should be sent to this endpoint using Basic authentication using your API key as password:\n\n  Authorization: `Basic 3f9g2bc9da80957de8f6e9f3623a6b35c3cc30c4`\n\nHTTP responses are given in JSON format, so the following Accept header is required for every API call:\n\n  Accept: `application/json`\n  \nAdditional documentation can be found at https://support.3blades.io.\n\n  **Stream API**\n\n The 3Blades Stream API is available at:\n \n   wss://ws.3blades.io/\n   \n  Authentication is the same on the Stream API as it is on the REST API:\n\n  Authorization: `Basic 3f9g2bc9da80957de8f6e9f3623a6b35c3cc30c4`",
    "license" : {
      "name" : "BSD 3.0",
      "url" : "https://opensource.org/licenses/BSD-3-Clause"
    }
  },
  "tags" : [ {
    "name" : "internal-use",
    "description" : "These actions are used internally for other apps/services"
  }, {
    "name" : "user-account",
    "description" : "Retrieve information about the user account"
  }, {
    "name" : "collaborators",
    "description" : ""
  }, {
    "name" : "projects",
    "description" : ""
  }, {
    "name" : "servers",
    "description" : ""
  }, {
    "name" : "rest-api",
    "description" : "rest api endpoint type"
  }, {
    "name" : "stream-api",
    "description" : "stream api endpoint type"
  } ],
  "host" : "virtserver.swaggerhub.com",
  "basePath" : "/3Blades/app-backend/v1",
  "schemes" : [ "https" ],
  "produces" : [ "application/json" ],
  "consumes" : [ "application/json" ],
  "securityDefinitions" : {
    "oauth2_password" : {
      "flow" : "password",
      "type" : "oauth2",
      "tokenUrl" : "/auth/oauth2/token",
      "scopes" : {
        "user" : "User scope",
        "admin" : "For admin operations"
      }
    }
  },
  "security" : [ {
    "oauth2_password" : [ "user" ]
  } ],
  "paths" : {
    "/admin/users" : {
      "get" : {
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Gets a list of all users.",
        "parameters" : [ {
          "$ref" : "#/parameters/skip-param"
        }, {
          "$ref" : "#/parameters/limit-param"
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of users",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/User"
              }
            }
          }
        }
      },
      "post" : {
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Adds a new user",
        "parameters" : [ {
          "in" : "body",
          "name" : "user",
          "description" : "User definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "User created",
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location to get the new user"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/admin/users/{user-id}" : {
      "get" : {
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Gets a user by ID",
        "parameters" : [ {
          "$ref" : "#/parameters/user-id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the user data",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "404" : {
            "$ref" : "#/responses/UserDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Updates user object",
        "description" : "Updates user data",
        "parameters" : [ {
          "$ref" : "#/parameters/user-id"
        }, {
          "in" : "body",
          "name" : "user",
          "description" : "User definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User updated"
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          },
          "404" : {
            "$ref" : "#/responses/UserDoesNotExistResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Deletes a user by ID",
        "parameters" : [ {
          "$ref" : "#/parameters/user-id"
        } ],
        "responses" : {
          "200" : {
            "description" : "User deleted"
          },
          "404" : {
            "$ref" : "#/responses/UserDoesNotExistResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/admin/servers/options/resources" : {
      "get" : {
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "parameters" : [ {
          "$ref" : "#/parameters/skip-param"
        }, {
          "$ref" : "#/parameters/limit-param"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ServerResourcesType"
              }
            }
          }
        }
      },
      "post" : {
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "parameters" : [ {
          "name" : "resources-type",
          "in" : "body",
          "description" : "Resources type to create",
          "schema" : {
            "$ref" : "#/definitions/ServerResourcesType"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "Location where the new item can be obtained"
              }
            }
          }
        }
      }
    },
    "/admin/servers/options/resources/{resources-id}" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "resources-id",
        "required" : true,
        "type" : "string"
      } ],
      "delete" : {
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Deletes an unused resource type",
        "responses" : {
          "200" : {
            "description" : "Deleted"
          },
          "404" : {
            "$ref" : "#/responses/GeneralDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Updates a resource type",
        "responses" : {
          "200" : {
            "description" : "Updated"
          }
        }
      }
    },
    "/admin/servers/options/types" : {
      "get" : {
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "parameters" : [ {
          "$ref" : "#/parameters/skip-param"
        }, {
          "$ref" : "#/parameters/limit-param"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ServerType"
              }
            }
          }
        }
      },
      "post" : {
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "parameters" : [ {
          "name" : "server-type",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/ServerType"
          },
          "description" : "Environment type to create"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        }
      }
    },
    "/admin/servers/options/types/{type-id}" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "type-id",
        "required" : true,
        "type" : "string"
      } ],
      "delete" : {
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Deletes an unused env type",
        "responses" : {
          "200" : {
            "description" : "Deleted"
          },
          "404" : {
            "$ref" : "#/responses/GeneralDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Updates an env type",
        "responses" : {
          "200" : {
            "description" : "Updated"
          }
        }
      }
    },
    "/admin/audit-logs" : {
      "get" : {
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "parameters" : [ {
          "$ref" : "#/parameters/skip-param"
        }, {
          "$ref" : "#/parameters/limit-param"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AuditLog"
              }
            }
          },
          "206" : {
            "description" : "Partial Content"
          }
        }
      },
      "post" : {
        "security" : [ {
          "oauth2_password" : [ "admin" ]
        } ],
        "summary" : "Register actions or events that occurs internally on other application or services",
        "tags" : [ "internal-use" ],
        "parameters" : [ {
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AuditLog"
          },
          "in" : "body",
          "name" : "audit-log",
          "description" : "the event to register"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        }
      }
    },
    "/{owner-id}/projects" : {
      "parameters" : [ {
        "$ref" : "#/parameters/owner-id"
      } ],
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Gets all the projects in the owner context",
        "operationId" : "searchProject",
        "description" : "By passing in the appropriate options, you can search for\navailable project in the system\n",
        "parameters" : [ {
          "name" : "searchString",
          "in" : "query",
          "description" : "pass an optional search string for looking up project",
          "required" : false,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/skip-param"
        }, {
          "$ref" : "#/parameters/limit-param"
        } ],
        "responses" : {
          "200" : {
            "description" : "Search results matching criteria",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Project"
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      },
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Adds a new project",
        "parameters" : [ {
          "in" : "body",
          "name" : "project",
          "description" : "Project to add",
          "schema" : {
            "$ref" : "#/definitions/Project"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Project created",
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location to get the new project"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          },
          "409" : {
            "description" : "An existing project already exists"
          }
        }
      }
    },
    "/{owner-id}/groups" : {
      "parameters" : [ {
        "$ref" : "#/parameters/owner-id"
      } ],
      "get" : {
        "parameters" : [ {
          "$ref" : "#/parameters/skip-param"
        }, {
          "$ref" : "#/parameters/limit-param"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Group"
              }
            }
          }
        }
      },
      "post" : {
        "parameters" : [ {
          "name" : "group",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Group"
          },
          "description" : "New group to create"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Group"
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/{owner-id}/groups/{group-id}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/owner-id"
      }, {
        "$ref" : "#/parameters/group-id"
      } ],
      "put" : {
        "description" : "Updates a group",
        "parameters" : [ {
          "in" : "body",
          "name" : "group",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Group"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "description" : "Deletes a group",
        "responses" : {
          "200" : {
            "description" : "Deleted"
          }
        }
      }
    },
    "/{user-id}/teams" : {
      "parameters" : [ {
        "$ref" : "#/parameters/user-id"
      } ],
      "get" : {
        "summary" : "Gets all user teams",
        "description" : "The teams can be the created by herself or those where her was added",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Team"
              }
            }
          }
        }
      }
    },
    "/{user-id}/integrations" : {
      "parameters" : [ {
        "$ref" : "#/parameters/user-id"
      } ],
      "get" : {
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "post" : {
        "parameters" : [ {
          "name" : "integration",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Integration"
          },
          "description" : "integration"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        }
      }
    },
    "/projects/{project-id}" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Gets a project by ID",
        "parameters" : [ {
          "$ref" : "#/parameters/project-id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the project data",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          }
        }
      },
      "put" : {
        "tags" : [ "projects" ],
        "summary" : "Updates project object",
        "description" : "Updates a project",
        "parameters" : [ {
          "$ref" : "#/parameters/project-id"
        }, {
          "in" : "body",
          "name" : "project",
          "description" : "Project to update",
          "schema" : {
            "$ref" : "#/definitions/Project"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Project updated"
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "tags" : [ "projects" ],
        "summary" : "Deletes a project by ID",
        "parameters" : [ {
          "$ref" : "#/parameters/project-id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Project deleted"
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/projects/{project-id}/files" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project-id"
      } ],
      "get" : {
        "tags" : [ "files" ],
        "summary" : "Gets files from a project",
        "responses" : {
          "200" : {
            "description" : "List of project files",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/File"
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/FileDoesNotExistResponse"
          }
        }
      },
      "post" : {
        "tags" : [ "files" ],
        "summary" : "Create new file in project",
        "responses" : {
          "201" : {
            "description" : "File created",
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location to get the new file"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          },
          "409" : {
            "description" : "An existing file already exists"
          }
        }
      }
    },
    "/project/{project-id}/files/{file-id}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/file-id"
      }, {
        "$ref" : "#/parameters/project-id"
      } ],
      "get" : {
        "tags" : [ "files" ],
        "summary" : "Gets file by Id",
        "responses" : {
          "200" : {
            "description" : "File data",
            "schema" : {
              "$ref" : "#/definitions/File"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "files" ],
        "summary" : "Updates a file",
        "parameters" : [ {
          "in" : "body",
          "name" : "file",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/File"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "File Updated"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "tags" : [ "files" ],
        "summary" : "Deletes a file",
        "responses" : {
          "200" : {
            "description" : "File deleted"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/projects/{project-id}/workspaces" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project-id"
      } ],
      "get" : {
        "tags" : [ "servers" ],
        "summary" : "Gets workspaces from a project",
        "responses" : {
          "200" : {
            "description" : "List of project workspaces",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Workspace"
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          }
        }
      },
      "post" : {
        "tags" : [ "servers" ],
        "summary" : "Creates a new workspace in the project",
        "parameters" : [ {
          "in" : "body",
          "name" : "workspace",
          "description" : "Workspace definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Workspace"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Workspace created",
            "schema" : {
              "$ref" : "#/definitions/Workspace"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location where the new workspace is"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/projects/{project-id}/workspaces/{workspace-id}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project-id"
      }, {
        "$ref" : "#/parameters/workspace-id"
      } ],
      "get" : {
        "tags" : [ "servers" ],
        "summary" : "Gets workspace by Id",
        "responses" : {
          "200" : {
            "description" : "Workspace data",
            "schema" : {
              "$ref" : "#/definitions/Workspace"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "servers" ],
        "summary" : "Updates a workspace",
        "parameters" : [ {
          "in" : "body",
          "name" : "workspace",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Workspace"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Workspace Updated"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "tags" : [ "servers" ],
        "summary" : "Deletes a workspace",
        "responses" : {
          "200" : {
            "description" : "Workspace deleted"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/projects/{project-id}/models" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project-id"
      } ],
      "get" : {
        "tags" : [ "servers" ],
        "summary" : "Gets all models contained in a project",
        "responses" : {
          "200" : {
            "description" : "List of project models",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Model"
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          }
        }
      },
      "post" : {
        "tags" : [ "servers" ],
        "summary" : "Creates a new model to the project",
        "parameters" : [ {
          "in" : "body",
          "name" : "model",
          "description" : "Model definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Model created",
            "schema" : {
              "$ref" : "#/definitions/Model"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location where the new model is"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/projects/{project-id}/models/{model-id}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project-id"
      }, {
        "$ref" : "#/parameters/model-id"
      } ],
      "get" : {
        "tags" : [ "servers" ],
        "summary" : "Gets model by Id",
        "responses" : {
          "200" : {
            "description" : "Model data",
            "schema" : {
              "$ref" : "#/definitions/Model"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "servers" ],
        "summary" : "Updates a model",
        "parameters" : [ {
          "in" : "body",
          "name" : "model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Model"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Model Updated"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "tags" : [ "servers" ],
        "summary" : "Deletes a model",
        "responses" : {
          "200" : {
            "description" : "Model deleted"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/projects/{project-id}/jobs" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project-id"
      } ],
      "get" : {
        "tags" : [ "servers" ],
        "summary" : "Gets all the jobs contain in a project",
        "responses" : {
          "200" : {
            "description" : "List of project jobs",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Job"
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          }
        }
      },
      "post" : {
        "tags" : [ "servers" ],
        "summary" : "Creates a new job to the project",
        "parameters" : [ {
          "in" : "body",
          "name" : "job",
          "description" : "Job definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Job"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Job created",
            "schema" : {
              "$ref" : "#/definitions/Job"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "The location where the new job is"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/projects/{project-id}/jobs/{job-id}" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project-id"
      }, {
        "$ref" : "#/parameters/job-id"
      } ],
      "get" : {
        "tags" : [ "servers" ],
        "summary" : "Gets job by Id",
        "responses" : {
          "200" : {
            "description" : "Job data",
            "schema" : {
              "$ref" : "#/definitions/Job"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "servers" ],
        "summary" : "Updates a job",
        "parameters" : [ {
          "in" : "body",
          "name" : "model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Job"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Job Updated"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      },
      "delete" : {
        "tags" : [ "servers" ],
        "summary" : "Deletes a job",
        "responses" : {
          "200" : {
            "description" : "Job deleted"
          },
          "404" : {
            "description" : "The resource was not found"
          },
          "default" : {
            "$ref" : "#/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/projects/{project-id}/server/{server-id}/runs/stats" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project-id"
      }, {
        "$ref" : "#/parameters/server-id"
      } ],
      "get" : {
        "tags" : [ "servers" ],
        "summary" : "Gets all the run statistics",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ServerRunStatistics"
              }
            }
          }
        }
      }
    },
    "/projects/{project-id}/server/{server-id}/runs/{run-id}/stats" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project-id"
      }, {
        "$ref" : "#/parameters/server-id"
      }, {
        "in" : "path",
        "name" : "run-id",
        "type" : "number",
        "format" : "int32",
        "required" : true
      } ],
      "get" : {
        "tags" : [ "servers" ],
        "summary" : "Gets all the run statistics",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ServerRunStatistics"
              }
            }
          }
        }
      }
    },
    "/projects/{project-id}/server/{server-id}/statistics" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project-id"
      }, {
        "$ref" : "#/parameters/server-id"
      } ],
      "get" : {
        "tags" : [ "servers" ],
        "summary" : "Gets all the statistics of server",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ServerStatistics"
              }
            }
          }
        }
      }
    },
    "/projects/{project-id}/server/{server-id}/logs" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project-id"
      }, {
        "$ref" : "#/parameters/server-id"
      } ],
      "get" : {
        "tags" : [ "servers", "stream api" ],
        "summary" : "gets streaming logs by project and server ids",
        "parameters" : [ {
          "name" : "tail",
          "in" : "query",
          "default" : 300,
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "follow",
          "in" : "query",
          "default" : true,
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Workspace logs",
            "schema" : {
              "$ref" : "#/definitions/ServerLog"
            }
          }
        }
      }
    },
    "/projects/{project-id}/collaborators" : {
      "parameters" : [ {
        "$ref" : "#/parameters/project-id"
      } ],
      "get" : {
        "tags" : [ "collaborators" ],
        "summary" : "Gets all active project collaborators",
        "description" : "",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Collaborator"
            }
          },
          "404" : {
            "$ref" : "#/responses/ProjectDoesNotExistResponse"
          }
        }
      },
      "post" : {
        "tags" : [ "collaborators" ],
        "summary" : "Add a collaborator to the project",
        "parameters" : [ {
          "in" : "body",
          "name" : "collaborator email",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The collaborator was added",
            "headers" : {
              "Location" : {
                "description" : "Location where the collaborator can be obtained",
                "type" : "string"
              }
            }
          },
          "400" : {
            "$ref" : "#/responses/BadRequestResponse"
          }
        }
      }
    },
    "/projects/{project-id}/collaborators/{user-id}" : {
      "delete" : {
        "tags" : [ "collaborators" ],
        "summary" : "Deletes a collaborator from the project",
        "parameters" : [ {
          "$ref" : "#/parameters/project-id"
        }, {
          "$ref" : "#/parameters/user-id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Collaborator deleted"
          }
        }
      }
    },
    "/account/settings" : {
      "get" : {
        "tags" : [ "user-account" ],
        "summary" : "Gets the user settings",
        "responses" : {
          "200" : {
            "description" : "User settings",
            "schema" : {
              "type" : "object",
              "properties" : {
                "sshKey" : {
                  "$ref" : "#/definitions/SSHKey"
                },
                "emails" : {
                  "description" : "List of all emails registered",
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Email"
                  }
                },
                "integrations" : {
                  "description" : "List of all integrations in the account",
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Integration"
                  }
                },
                "token" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "$ref" : "#/responses/UserDoesNotExistResponse"
          }
        }
      }
    },
    "/account/settings/sshkey" : {
      "get" : {
        "tags" : [ "user-account" ],
        "summary" : "Gets the ssh key created",
        "responses" : {
          "200" : {
            "description" : "Show the public part of SSH key",
            "schema" : {
              "$ref" : "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/account/settings/sshkey/reset" : {
      "post" : {
        "summary" : "Creates or resets the ssh key",
        "tags" : [ "user-account" ],
        "responses" : {
          "201" : {
            "description" : "ssh-key created or updated",
            "schema" : {
              "$ref" : "#/definitions/SSHKey"
            }
          }
        }
      }
    },
    "/account/settings/emails" : {
      "get" : {
        "summary" : "Gets the emails registered in the account",
        "tags" : [ "user-account" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Email"
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Registers a new email",
        "tags" : [ "user-account" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "email",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Email"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "OK"
          }
        }
      }
    },
    "/account/settings/emails/{address}/make-primary" : {
      "put" : {
        "tags" : [ "user-account" ],
        "summary" : "Make the email address primary",
        "parameters" : [ {
          "in" : "path",
          "name" : "address",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/account/settings/api-key" : {
      "get" : {
        "tags" : [ "user-account" ],
        "summary" : "gets the value of api-key",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Token"
            }
          }
        }
      }
    },
    "/account/settings/api-key/reset" : {
      "post" : {
        "tags" : [ "user-account" ],
        "summary" : "Creates or Resets the api-key",
        "responses" : {
          "201" : {
            "description" : "ssh-key created or updated",
            "schema" : {
              "$ref" : "#/definitions/Token"
            }
          }
        }
      }
    },
    "/users/me" : {
      "get" : {
        "tags" : [ "user-account" ],
        "summary" : "Gets the user info",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "AuditLog" : {
      "type" : "object",
      "required" : [ "date", "action", "user-id" ],
      "properties" : {
        "id" : {
          "format" : "integer",
          "type" : "integer",
          "readOnly" : true
        },
        "date" : {
          "format" : "date-time",
          "type" : "string"
        },
        "action" : {
          "type" : "string"
        },
        "user-id" : {
          "format" : "integer",
          "type" : "integer"
        }
      }
    },
    "Collaborator" : {
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/User"
      } ],
      "properties" : {
        "joined" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "isOwner" : {
          "type" : "boolean",
          "default" : false,
          "readOnly" : true
        }
      }
    },
    "Email" : {
      "type" : "object",
      "required" : [ "address" ],
      "properties" : {
        "address" : {
          "type" : "string"
        },
        "public" : {
          "default" : true,
          "type" : "boolean"
        }
      }
    },
    "File" : {
      "type" : "object",
      "required" : [ "content", "encoding", "file-path" ],
      "properties" : {
        "file-id" : {
          "type" : "string",
          "readOnly" : true
        },
        "file-path" : {
          "type" : "string"
        },
        "encoding" : {
          "type" : "string"
        },
        "author-email" : {
          "type" : "string"
        },
        "author-name" : {
          "type" : "string"
        },
        "content" : {
          "type" : "string",
          "format" : "byte",
          "description" : "content as base64 encoded characters"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "file size in bytes"
        },
        "public" : {
          "default" : true,
          "type" : "boolean"
        }
      }
    },
    "ServerType" : {
      "type" : "object",
      "required" : [ "name", "imageName", "Cmd" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string"
        },
        "imageName" : {
          "type" : "string",
          "minLength" : 200
        },
        "Cmd" : {
          "type" : "string"
        }
      }
    },
    "Error" : {
      "type" : "object",
      "required" : [ "code", "message" ],
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "Group" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 20
        },
        "admin" : {
          "default" : false,
          "type" : "boolean"
        },
        "readPermission" : {
          "default" : false,
          "type" : "boolean"
        },
        "writePermission" : {
          "default" : false,
          "type" : "boolean"
        }
      }
    },
    "Integration" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "Int64",
          "type" : "integer"
        },
        "integrationId" : {
          "description" : "This value is an external id that the provider use to identify the integration",
          "type" : "string"
        },
        "integrationEmail" : {
          "type" : "string"
        },
        "user-id" : {
          "description" : "The User id",
          "type" : "string"
        },
        "scopes" : {
          "description" : "the scopes where the integration is valid",
          "type" : "string"
        },
        "provider" : {
          "description" : "Provider name",
          "type" : "string"
        },
        "settings" : {
          "description" : "If the integration use addtitional information",
          "type" : "string"
        }
      }
    },
    "Job" : {
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/Server"
      } ],
      "required" : [ "script", "method" ],
      "properties" : {
        "script" : {
          "type" : "string",
          "example" : "my_model.py"
        },
        "method" : {
          "type" : "string",
          "example" : "sumNumbers"
        },
        "auto_restart" : {
          "type" : "boolean",
          "default" : true,
          "example" : false
        },
        "schedule" : {
          "type" : "string",
          "description" : "schedule this job every determined period",
          "enum" : [ "minute", "hour", "day", "week", "month", "year" ],
          "default" : "hour",
          "example" : "minute"
        }
      }
    },
    "Model" : {
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/Server"
      } ],
      "required" : [ "script", "method" ],
      "properties" : {
        "script" : {
          "type" : "string",
          "example" : "my_model.py"
        },
        "method" : {
          "type" : "string",
          "example" : "sumNumbers"
        }
      }
    },
    "Project" : {
      "type" : "object",
      "required" : [ "name", "isPrivate" ],
      "properties" : {
        "project-id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "example" : "MyFirstProject",
          "pattern" : "[a-zA-Z0-9\\-]",
          "minLength" : 4,
          "maxLength" : 20
        },
        "description" : {
          "type" : "string",
          "example" : "A short description about the project."
        },
        "isPrivate" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "ServerResourcesType" : {
      "type" : "object",
      "required" : [ "name", "cpu", "memory" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string"
        },
        "cpu" : {
          "type" : "integer",
          "example" : 10
        },
        "memory" : {
          "type" : "integer",
          "example" : 512
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        }
      }
    },
    "Role" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "Server" : {
      "type" : "object",
      "required" : [ "name", "envTypeId", "resourcesId" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 20
        },
        "startupScript" : {
          "type" : "string"
        },
        "envTypeId" : {
          "$ref" : "#/definitions/ServerType"
        },
        "resourcesId" : {
          "$ref" : "#/definitions/ServerResourcesType"
        },
        "envVars" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ServerLog" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "number",
          "format" : "int32"
        },
        "log" : {
          "format" : "text",
          "type" : "string"
        },
        "stream-type" : {
          "format" : "text",
          "type" : "string"
        },
        "timestamp" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "ServerRunStatistics" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "number",
          "format" : "int32"
        },
        "start" : {
          "format" : "date-time",
          "type" : "string"
        },
        "stop" : {
          "format" : "date-time",
          "type" : "string"
        },
        "exitCode" : {
          "format" : "int32",
          "type" : "integer"
        },
        "size" : {
          "format" : "int64",
          "type" : "number"
        },
        "stacktrace" : {
          "format" : "text",
          "type" : "string"
        }
      }
    },
    "ServerStatistics" : {
      "type" : "object",
      "properties" : {
        "start" : {
          "format" : "date-time",
          "type" : "string"
        },
        "stop" : {
          "format" : "date-time",
          "type" : "string"
        },
        "size" : {
          "format" : "int64",
          "type" : "number"
        }
      }
    },
    "SSHKey" : {
      "properties" : {
        "value" : {
          "type" : "string"
        }
      }
    },
    "SSHTunnel" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "integer",
          "type" : "integer"
        },
        "name" : {
          "format" : "character varying",
          "type" : "string"
        },
        "host" : {
          "format" : "character varying",
          "type" : "string"
        },
        "local_port" : {
          "format" : "integer",
          "type" : "integer"
        },
        "endpoint" : {
          "format" : "character varying",
          "type" : "string"
        },
        "remote_port" : {
          "format" : "integer",
          "type" : "integer"
        },
        "username" : {
          "format" : "character varying",
          "type" : "string"
        },
        "server_id" : {
          "format" : "integer",
          "type" : "integer"
        }
      }
    },
    "SyncedResource" : {
      "properties" : {
        "id" : {
          "format" : "integer",
          "type" : "integer"
        },
        "project-id" : {
          "format" : "integer",
          "type" : "integer"
        },
        "integrationId" : {
          "format" : "integer",
          "type" : "integer"
        },
        "folder" : {
          "format" : "character varying",
          "type" : "string"
        },
        "url" : {
          "format" : "character varying",
          "type" : "string"
        },
        "settings" : {
          "format" : "json",
          "type" : "string"
        },
        "lastSync" : {
          "format" : "timestamp without time zone",
          "type" : "string"
        },
        "status" : {
          "format" : "character varying",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "Team" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "integer",
          "type" : "integer"
        },
        "name" : {
          "format" : "character varying",
          "type" : "string"
        },
        "email" : {
          "format" : "character varying",
          "type" : "string"
        },
        "created_at" : {
          "format" : "timestamp without time zone",
          "type" : "string"
        },
        "createdById" : {
          "format" : "integer",
          "type" : "integer"
        },
        "avatarUrl" : {
          "format" : "character varying",
          "type" : "string"
        },
        "website" : {
          "format" : "character varying",
          "type" : "string"
        },
        "lastUpdated" : {
          "format" : "timestamp without time zone",
          "type" : "string"
        },
        "location" : {
          "format" : "character varying",
          "type" : "string"
        },
        "description" : {
          "format" : "text",
          "type" : "string"
        },
        "billingEmail" : {
          "format" : "character varying",
          "type" : "string"
        },
        "billingAddressId" : {
          "format" : "integer",
          "type" : "integer"
        },
        "billingPlanId" : {
          "format" : "integer",
          "type" : "integer"
        }
      }
    },
    "TeamGroups" : {
      "type" : "object",
      "properties" : {
        "teamId" : {
          "format" : "integer",
          "type" : "integer"
        },
        "group-id" : {
          "format" : "integer",
          "type" : "integer"
        }
      }
    },
    "TeamMember" : {
      "type" : "object",
      "properties" : {
        "teamId" : {
          "format" : "integer",
          "type" : "integer"
        },
        "memberId" : {
          "format" : "integer",
          "type" : "integer"
        },
        "status" : {
          "format" : "character varying",
          "type" : "string"
        }
      }
    },
    "Token" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string"
        }
      }
    },
    "User" : {
      "type" : "object",
      "required" : [ "email", "username", "firstName" ],
      "properties" : {
        "user-id" : {
          "type" : "string",
          "readOnly" : true
        },
        "username" : {
          "type" : "string",
          "minLength" : 6,
          "maxLength" : 15
        },
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "avatarUrl" : {
          "type" : "string"
        },
        "bio" : {
          "type" : "string"
        },
        "location" : {
          "type" : "string"
        },
        "company" : {
          "type" : "string"
        },
        "timezone" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "confirmedAt" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "createdAt" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        }
      }
    },
    "Workspace" : {
      "type" : "object",
      "allOf" : [ {
        "$ref" : "#/definitions/Server"
      } ]
    }
  },
  "parameters" : {
    "skip-param" : {
      "name" : "skip",
      "in" : "query",
      "description" : "number of items to skip",
      "required" : false,
      "type" : "integer",
      "format" : "int32"
    },
    "limit-param" : {
      "name" : "limit",
      "in" : "query",
      "description" : "max records to return",
      "required" : false,
      "type" : "integer",
      "format" : "int32"
    },
    "user-id" : {
      "name" : "user-id",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 25,
      "description" : "The user's Id",
      "type" : "string"
    },
    "project-id" : {
      "name" : "project-id",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 25,
      "description" : "The project's Id",
      "type" : "string"
    },
    "file-id" : {
      "name" : "file-id",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 25,
      "description" : "The file's Id",
      "type" : "string"
    },
    "workspace-id" : {
      "name" : "workspace-id",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 20,
      "description" : "The workspace's Id",
      "type" : "string"
    },
    "model-id" : {
      "name" : "model-id",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 20,
      "description" : "The model's Id",
      "type" : "string"
    },
    "job-id" : {
      "name" : "job-id",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 20,
      "description" : "The job's Id",
      "type" : "string"
    },
    "owner-id" : {
      "name" : "owner-id",
      "in" : "path",
      "required" : true,
      "description" : "User id or team Id to identify the context",
      "type" : "string"
    },
    "group-id" : {
      "name" : "group-id",
      "in" : "path",
      "required" : true,
      "minLength" : 8,
      "maxLength" : 20,
      "description" : "The group's Id",
      "type" : "string"
    },
    "server-id" : {
      "in" : "path",
      "name" : "server-id",
      "type" : "string",
      "required" : true,
      "description" : "Id to identify any type of server: Workspace, Model or Job"
    }
  },
  "responses" : {
    "UserDoesNotExistResponse" : {
      "description" : "User does not exist"
    },
    "FileDoesNotExistResponse" : {
      "description" : "File does not exist"
    },
    "ProjectDoesNotExistResponse" : {
      "description" : "Project does not exist"
    },
    "GeneralDoesNotExistResponse" : {
      "description" : "The object does not exist"
    },
    "BadRequestResponse" : {
      "description" : "Bad request. Verify field values"
    },
    "Standard500ErrorResponse" : {
      "description" : "Something was wrong",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    }
  }
}